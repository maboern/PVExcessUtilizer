/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
/* TODO:
    - Start warmwater before heatpump starts it by itself due to low temperature to avoid EMI-ACTIVE-ECO
    - Start warmwater in Greedy to run during peak hours
    - Offset to min/max power being 0 at the peak, higher in the mornging and lower in the afternoon for greedy buffering
    - Modulated Heating: Differntial
    - Opportunistic Surplus Buffering and / or Modulation depending on Percentile of Power in Forecast
    - Only do opportunistic Excess buffering if Forecast (of next hour?) near threshold
    - Solcast API, use 10%/90% spread to control available power lookback window
*/

// Static Script Parameters
var SCRIPT_UPDATE_INTERVAL_SEC = 15;
var SCRIPT_DEBUG = false;
const EXCESS_POWER_START_PERCENTILE = 80;
const EXCESS_POWER_STOP_PERCENTILE = 10;
var scriptRunTimeSecs = 0;
var isReady = false;
var unaccounted_power_smoothed = 0;
var SCRIPT_ID = 'javascript.0.info';

var SCRIPT_READY_OBJ = SCRIPT_ID + ".ready";
createState(SCRIPT_READY_OBJ, false, {read: true, write: false, name: "ready", type: "boolean", def: false});
var SCRIPT_RUNTIME_SECS_OBJ = SCRIPT_ID + ".runTimeSecs";
createState(SCRIPT_RUNTIME_SECS_OBJ, 0, {read: true, write: false, name: ".runTimeSecs", type: "number", unit: "s", def: 0});
var SCRIPT_CONTROLLED_LOADS_WATTS_OBJ = SCRIPT_ID + ".controlled_loads_watts";
createState(SCRIPT_CONTROLLED_LOADS_WATTS_OBJ, 0, {read: true, write: false, name: "controlledLoadPower", type: "number", unit: "W", def: 0});
var SCRIPT_AVAILABLE_MIN_WATTS_OBJ = SCRIPT_ID + ".min_available_watts";
createState(SCRIPT_AVAILABLE_MIN_WATTS_OBJ, 0, {read: true, write: false, name: "Min Available Watts", type: "number", unit: "W", def: 0});
var SCRIPT_AVAILABLE_MAX_WATTS_OBJ = SCRIPT_ID + ".max_available_watts";
createState(SCRIPT_AVAILABLE_MAX_WATTS_OBJ, 0, {read: true, write: false, name: "Max Available Watts", type: "number", unit: "W", def: 0});

let pv_forecast = new PVForecast(SCRIPT_ID, 13200, 4000);
let pv = new PVSystem(SCRIPT_ID, 'Turnerweg', pv_forecast);
let jackery = new ControllableBattery(SCRIPT_ID, 'Jackery', 2000, 1500, 0, 'e465b8455ce8#1');
let car = new ControllableBattery(SCRIPT_ID, 'Car', 78000, 1800, 0, '08f9e0fdb4ac#1');
car.setMinRuntimeSecs(10*60);
let boiler = new ControllableBoiler(SCRIPT_ID, 'Boiler');
let heater = new ControllableHeater(SCRIPT_ID, 'CellarHeater');

let heatpump_mgr = new HeatPumpManager(SCRIPT_ID, pv_forecast, boiler);

function getRecentStateVal(obj) {
    const SCRIPT_MAX_VALUE_AGE = 60 * 1000;
    var state = getState(obj);
    if(state.ts >= (Date.now() - SCRIPT_MAX_VALUE_AGE)) {
        return state.val;
    } else {
        return null;
    }
}

function updateRunTime() {
    scriptRunTimeSecs = scriptRunTimeSecs + SCRIPT_UPDATE_INTERVAL_SEC;
    setState(SCRIPT_RUNTIME_SECS_OBJ, scriptRunTimeSecs, true);
}

function checkReady() {
    if(pv.checkReady()) {
        if(isReady == false) {
            console.log("Script ready. Resuming....");
        }
        setState(SCRIPT_READY_OBJ, true, true);
        updateRunTime();
        isReady = true;
        return true;
    } else {
        if(isReady == true) {
            console.warn("Script became not ready after " + scriptRunTimeSecs + "s! Resetting runtime.");
        }
        setState(SCRIPT_READY_OBJ,false, true);
        scriptRunTimeSecs = 0;
        isReady = false;
        return false;
    }
}

function calculateControllableLoadPower() {
    let cur_total_load_power = 0;
    cur_total_load_power += heater.getCurrentPower();
    cur_total_load_power += boiler.getCurrentPower();
    cur_total_load_power += jackery.getCurrentPower();
    cur_total_load_power += car.getCurrentPower();
    cur_total_load_power += heatpump_mgr.getCurrentPower();
    return cur_total_load_power;
}

function calculateDisposableLoadPower() {
    let cur_disposable_load_power = 0;
    if(heater.allowedToStop()) {
        cur_disposable_load_power += heater.getCurrentPower();
    }
    if(boiler.allowedToStop()) {
        cur_disposable_load_power += boiler.getCurrentPower();
    }
    if(jackery.allowedToStop()) {
        cur_disposable_load_power += jackery.getCurrentPower();
    }
    if(car.allowedToStop()) {
        cur_disposable_load_power += car.getCurrentPower();
    }
    return cur_disposable_load_power;
}

function validateRunning() {
    let controlled_load_power = pv.getControllableLoadPower();
    let unaccounted_power = pv.getTotalConsumption() - controlled_load_power;
    unaccounted_power_smoothed = smooth(unaccounted_power_smoothed, unaccounted_power, 0.25);
    if(unaccounted_power_smoothed < 0) 
    {
        console.log("Negative remaining non-load power: " + unaccounted_power_smoothed + "! (Consumption: " + pv.getSelfConsumptionSmoothed() + ", Loads: " + controlled_load_power + ")");
    }
    boiler.validateRunning(unaccounted_power_smoothed);
    jackery.validateRunning(unaccounted_power_smoothed);
    heater.validateRunning(unaccounted_power_smoothed);
    car.validateRunning(unaccounted_power_smoothed);
}

function updateLoadControl(min_available_power, max_available_power)
{
    // The Heatpump is outside of priority order and always gets priority.
    heatpump_mgr.control(pv.getRecentAvailableSurplusPowerMeasurements(), pv.getRecentAvailableExcessPowerMeasurements());

    // TODO: Calculate Confidence Level from Generation Nowcast (Power - Forecast)
    // and Consumption Forecast (SEMP / maybe Statistics)

    // The order here defines load priority
    boiler.control(SCRIPT_UPDATE_INTERVAL_SEC, min_available_power, max_available_power);
    var expected_boiler_power = boiler.isOn() ? boiler.getExpectedPower() : 0;
    min_available_power -= expected_boiler_power;
    max_available_power -= expected_boiler_power;

    car.control(SCRIPT_UPDATE_INTERVAL_SEC, min_available_power, max_available_power);
    var expected_car_power = car.isOn() ? car.getExpectedPower() : 0;
    min_available_power -= expected_car_power;
    max_available_power -= expected_car_power; 

    jackery.control(SCRIPT_UPDATE_INTERVAL_SEC, min_available_power, max_available_power);
    var expected_jackery_power = jackery.isOn() ? jackery.getExpectedPower() : 0;
    min_available_power -= expected_jackery_power;
    max_available_power -= expected_jackery_power;

    heater.control(SCRIPT_UPDATE_INTERVAL_SEC, min_available_power, max_available_power);
    var expected_heater_power = heater.isOn() ? heater.getExpectedPower() : 0;
    min_available_power -= expected_heater_power;
    max_available_power -= expected_heater_power; 
}

function controlLoads() 
{
    validateRunning();
    let cur_disposable_load_power = calculateDisposableLoadPower();
    let excess_power = pv.getRecentExcessPowerMeasurements();

    var min_available_power = excess_power.percentile(EXCESS_POWER_STOP_PERCENTILE) + cur_disposable_load_power;
    setState(SCRIPT_AVAILABLE_MIN_WATTS_OBJ, min_available_power, true);
    var max_available_power = excess_power.percentile(EXCESS_POWER_START_PERCENTILE) + cur_disposable_load_power;
    setState(SCRIPT_AVAILABLE_MAX_WATTS_OBJ, max_available_power, true);
    let cur_total_load_power = pv.getControllableLoadPower();
    setState(SCRIPT_CONTROLLED_LOADS_WATTS_OBJ, cur_total_load_power, true);
    
    if(SCRIPT_DEBUG) {
        log("Excess: " + pv.getExcessPower() + "W; Available: (Min: " + min_available_power + "W, Max: " + max_available_power + "W).", 'silly');
    }

    updateLoadControl(min_available_power, max_available_power);
}

function updateControl() {
    if(!checkReady()) { return; }

    controlLoads();
}

function atSunrise() {
    heatpump_mgr.updateAtSunrise();
}
schedule('{"time":{"exactTime":true,"start":"sunrise"},"period":{"days":1}}', atSunrise);

function hourly() {
    heatpump_mgr.updateHourly();
}
schedule('{"time":{"start":"sunrise","end":"sunset","mode":"hours","interval":1},"period":{"days":1}}', hourly);

function resetDayValues() {
    console.log("Resetting statistics values of previous day!");

    pv.resetDayValues();
    jackery.resetDayValues();
    boiler.resetDayValues();
    heater.resetDayValues();
    car.resetDayValues();
    heatpump_mgr.resetDayValues();
}
schedule('{"time":{"exactTime":true,"start":"nadir"},"period":{"days":1}}', resetDayValues);

var ControlInterval = setInterval(function () {
    updateControl(); // start processing in interval
}, (SCRIPT_UPDATE_INTERVAL_SEC*1000));

var PVInterval = setInterval(function () {
    pv.setControllableLoadPower(calculateControllableLoadPower());
    pv.process(); // start processing in interval
}, (pv.getUpdateIntervalMs()));

var ForecastInterval = setInterval(function () {
    pv_forecast.process(); // start processing in interval
}, (pv_forecast.getUpdateIntervalMs()));
