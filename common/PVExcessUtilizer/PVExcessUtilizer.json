/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
// Static Script Parameters
var SCRIPT_UPDATE_INTERVAL_SEC = 30;
var SCRIPT_DEBUG = false;
var scriptRunTimeSecs = 0;
var isReady = false;
var SCRIPT_ID = 'javascript.0';

var SCRIPT_READY_OBJ = SCRIPT_ID + ".info.ready";
createState(SCRIPT_READY_OBJ, false, {read: true, write: false, name: "ready", type: "boolean", def: false});
var SCRIPT_RUNTIME_SECS_OBJ = SCRIPT_ID + ".info.runTimeSecs";
createState(SCRIPT_RUNTIME_SECS_OBJ, 0, {read: true, write: false, name: ".info.runTimeSecs", type: "number", unit: "s", def: 0});
var SCRIPT_CONTROLLED_LOADS_WATTS_OBJ = SCRIPT_ID + ".info.controlled_loads_watts";
createState(SCRIPT_CONTROLLED_LOADS_WATTS_OBJ, 0, {read: true, write: false, name: "controlledLoadPower", type: "number", unit: "W", def: 0});

let pv = new PVSystem(SCRIPT_ID, 'Turnerweg');
console.log(pv.getDetails());

let jackery = new ControllableBattery(SCRIPT_ID, 'Jackery', 2000);
let boiler = new ControllableBoiler(SCRIPT_ID, 'Boiler');
let heater = new ControllableHeater(SCRIPT_ID, 'Cellar Heater');

function getRecentStateVal(obj) {
    const SCRIPT_MAX_VALUE_AGE = 60 * 1000;
    var state = getState(obj);
    if(state.ts >= (Date.now() - SCRIPT_MAX_VALUE_AGE)) {
        return state.val;
    } else {
        return null;
    }
}

function updateRunTime() {
    scriptRunTimeSecs = scriptRunTimeSecs + SCRIPT_UPDATE_INTERVAL_SEC;
    setState(SCRIPT_RUNTIME_SECS_OBJ, scriptRunTimeSecs, true);
}

function checkReady() {
    if(pv.checkReady()) {
        if(isReady == false) {
            console.log("Script ready. Resuming....");
        }
        setState(SCRIPT_READY_OBJ, true, true);
        updateRunTime();
        isReady = true;
        return true;
    } else {
        if(isReady == true) {
            console.warn("Script became not ready after " + scriptRunTimeSecs + "s! Resetting runtime.");
        }
        setState(SCRIPT_READY_OBJ,false, true);
        scriptRunTimeSecs = 0;
        isReady = false;
        return false;
    }
}


function controlLoads() 
{
    boiler.validateRunning(pv.getSelfConsumption());
    jackery.validateRunning(pv.getSelfConsumption());
    heater.validateRunning(pv.getSelfConsumption());

    var cur_total_load_power = 0;
    cur_total_load_power += heater.getCurrentPower();
    cur_total_load_power += boiler.getCurrentPower();
    cur_total_load_power += jackery.getCurrentPower();
    setState(SCRIPT_CONTROLLED_LOADS_WATTS_OBJ, cur_total_load_power, true);

    var available_power = pv.getExcessPower() + cur_total_load_power;
    
    if(SCRIPT_DEBUG) {
        console.debug("Excess: " + pv.getExcessPower() + "W; Available: " + available_power + "W");
    }

    boiler.control(SCRIPT_UPDATE_INTERVAL_SEC, available_power);
    available_power -= boiler.getCurrentPower();

    heater.control(SCRIPT_UPDATE_INTERVAL_SEC, available_power);
    available_power -= heater.getCurrentPower();

    jackery.control(SCRIPT_UPDATE_INTERVAL_SEC, available_power);
    available_power -= jackery.getCurrentPower();
}

function updateControl() {
    if(!checkReady()) { return; }

    pv.writeState();
    controlLoads();
}


function resetDayValues() {
    console.log("Resetting statistics values of previous day!");

    jackery.resetDayValues();
    boiler.resetDayValues();
    heater.resetDayValues();
}
schedule('{"time":{"exactTime":true,"start":"nadir"},"period":{"days":1}}', resetDayValues);

var Interval = setInterval(function () {
  updateControl(); // start processing in interval
}, (SCRIPT_UPDATE_INTERVAL_SEC*1000));

var PVInterval = setInterval(function () {
  pv.process(); // start processing in interval
}, (pv.getUpdateIntervalMs()));
