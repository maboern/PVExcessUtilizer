/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
class ControllableBattery extends ControllableLoad {
    constructor(script_id, name, capacity_wh) {
        super(script_id, name, CONTROLLABLE_LOAD_TYPE.BATTERY);

        this.capacity_wh = capacity_wh;
        this.max_level_of_charge_percent = 80;
        this.charging_loss_percent = 15;
        this.max_day_runtime_secs = 5400;
        this.startup_time_ms = 60 * 1000;
        this.min_runtime_secs = 5 * 60;

        this.expected_power = 1500;
        this.load_hysteresis_power = 150;
        this.is_connected_obj = 'shelly.0.shellyplusplugs#e465b8455ce8#1.online';
        this.switch_obj = 'shelly.0.shellyplusplugs#e465b8455ce8#1.Relay0.Switch';
        this.measured_power_obj = 'shelly.0.shellyplusplugs#e465b8455ce8#1.Relay0.Power';

        this.level_of_charge_percent_obj = this.root_obj + '.loc_percent';
        createState(this.level_of_charge_percent_obj, 0, {read: true, write: true, name: "Level of Charge Percent", type: "number", unit: "%", def: 100});
        this.level_of_charge_percent = getState(this.level_of_charge_percent_obj).val

        console.log("Initialized " + this.toString());
    }

    toString() {
        return super.toString() + ": " + this.capacity_wh + "Wh";
    }

    updateLevelOfCharge(interval) {
        var interval_energy = interval * this.getCurrentPower();
        var loc_percent_increase = (100 - this.charging_loss_percent) * interval_energy / (this.capacity_wh * 3600);
        this.level_of_charge_percent += loc_percent_increase;
        setState(this.level_of_charge_percent_obj, this.level_of_charge_percent, true);
    }

    updateRunTime(interval) {
        super.updateRunTime(interval);
        this.updateLevelOfCharge(interval);
    }

    validateDrawingFullPower() {
        const POWER_DRAW_TOLERANCE = 200;
        if(this.hasStartedUp()) {
            var measured_power = this.getMeasuredPower();
            if(measured_power < this.expected_power - POWER_DRAW_TOLERANCE) {
                console.log("Load " + this.name + " is not drawing full power (" + measured_power + "/" + this.expected_power + "): Assuming 90%+ charged!");
                this.level_of_charge_percent = 90;
                setState(this.level_of_charge_percent_obj, this.level_of_charge_percent, true);
                return false;
            }
        } 
        return true;
    }

    allowedToRun() {      
        if(this.level_of_charge_percent < this.max_level_of_charge_percent) {
            return super.allowedToRun();
        } else {
            return false;
        }
    }

    checkUpdateLocFromState() {
        var old_loc = this.level_of_charge_percent;
        this.level_of_charge_percent = getState(this.level_of_charge_percent_obj).val;
        setState(this.level_of_charge_percent_obj, this.level_of_charge_percent, true);
        if(this.level_of_charge_percent != old_loc) {
            console.log("Load " + this.name + ": Updated LOC " + old_loc + "% -> " + this.level_of_charge_percent + "%");
        }
    }

    validateRunning(non_load_consumption) {
        this.checkUpdateLocFromState();
        this.validateDrawingFullPower();
        return super.validateRunning(non_load_consumption);
    }
}
