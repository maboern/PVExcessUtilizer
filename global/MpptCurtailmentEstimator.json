/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
// PV curtailment estimate from Inverter MPPT (Maximum Power Point Tracking) via measured Panel voltage
class MpptCurtailmentEstimator {
    constructor(script_id, string_voltage_obj, nr_string_panels) {
        this.SCRIPT_DEBUG = false;
        this.MPPT_DYNAMICS = 0.1;
        this.POWER_SMOOTHING_DYNAMICS = 0.01;

        this.script_id = script_id;
        this.string_voltage_obj = string_voltage_obj;
        this.nr_string_panels = nr_string_panels;

        this.curtailment = 0;
        this.power = 0;
        this.smoothed_power = 0;
        this.uncurtailed_panel_voltage = -1;
        this.last_uncurtailed_ts = 0;
        this.last_uncurtailed_power = 0;
        this.smoothed_panel_voltage = 0;
        this.panel_voltage = 0;

        this.root_obj = script_id + '.info.mppt';
        this.SCRIPT_CURTAILMENT_PERCENT_ESTIMATE_OBJ = this.root_obj + ".curtailment";
        createState(this.SCRIPT_CURTAILMENT_PERCENT_ESTIMATE_OBJ, 0, {read: true, write: false, name: "CurtailmentPercentEstimate", type: "number", unit: "%", def: 0});
        this.SCRIPT_MPPT_POWER_ESTIMATE_OBJ = this.root_obj + ".power";
        createState(this.SCRIPT_MPPT_POWER_ESTIMATE_OBJ, 0, {read: true, write: false, name: "PowerEstimate", type: "number", unit: "W", def: 0});
        this.SCRIPT_SMOOTHED_PANEL_VOLTAGE_OBJ = this.root_obj + ".smoothed_panel_voltage";
        createState(this.SCRIPT_SMOOTHED_PANEL_VOLTAGE_OBJ, 0, {read: true, write: false, name: "SmoothedPanelVoltage", type: "number", unit: "V", def: 0});
        this.SCRIPT_UNCURTAILED_PANEL_VOLTAGE_OBJ = this.root_obj + ".uncurtailed_panel_voltage";
        createState(this.SCRIPT_UNCURTAILED_PANEL_VOLTAGE_OBJ, 0, {read: true, write: false, name: "UncurtailedPanelVoltage", type: "number", unit: "V", def: 0});
        this.SCRIPT_UNCURTAILED_PANEL_VOLTAGE_POWER_OBJ = this.root_obj + ".uncurtailed_panel_voltage_power";
        createState(this.SCRIPT_UNCURTAILED_PANEL_VOLTAGE_POWER_OBJ, 0, {read: true, write: false, name: "UncurtailedPanelVoltagePowerLevel", type: "number", unit: "W", def: 0});

        this.readUncurtailedVoltageFromState();
    }

    getCurtailmentPercent() { return this.curtailment; }
    getPower() {return this.power; }
    readUncurtailedVoltageFromState() {
        var state = getState(this.SCRIPT_UNCURTAILED_PANEL_VOLTAGE_OBJ);
        this.uncurtailed_panel_voltage = state.val;
        this.last_uncurtailed_ts = state.lc;
        this.last_uncurtailed_power = getState(this.SCRIPT_UNCURTAILED_PANEL_VOLTAGE_POWER_OBJ).val;
        console.log("Updating uncurtailed panel voltage from state: " + this.uncurtailed_panel_voltage + "V @ " + this.last_uncurtailed_power + "W");
    }

    updateCurtailmentEstimate()
    {
        var mppt_voltage_offset = this.smoothed_panel_voltage - this.uncurtailed_panel_voltage;

        if(mppt_voltage_offset < 0.25) {
            // Voltage within error margin around peak power or below - assume no curtailment
            this.curtailment = 0;
        } else if (mppt_voltage_offset < 10) {
            // Power curve estimation further away from peak power is -10%/V
            var net_mppt_voltage_offset = mppt_voltage_offset - 0.25;
            this.curtailment = 0.1*net_mppt_voltage_offset;
        } else {
            // Voltage way above - something is strange
            this.curtailment = 0;
        }
    }

    uncurtailedVoltageIsStale() {
        const CURTAILMENT_VOLTAGE_ESTIMATE_STALENESS_TIMOUT_MS = 2*60*60*1000;
        const NORM_POWER_LEVEL_CHANGE = 2000;
        
        // The uncurtailed MPTT voltage is highly temperature-dependent, in addition
        // to having some correlation with irradiance. If we operate a prolonged time
        // in curtailed mode, without opportunity to get a fresh sampling of the current
        // uncurtailed voltage, we lose accuracy.
        // Here, we simply take the irradiance (~estimated power) as proxy for the temperature,
        // postulating that the panels will heat up very fast in the sun. Therefore, the higher
        // the change in power since the last uncurtailed measurements, the faster our uncurtailed
        // voltage estimation becomes stale.
        var power_level_change = Math.abs(this.smoothed_power - this.last_uncurtailed_power);
        var power_level_change_factor = 1 + (power_level_change / NORM_POWER_LEVEL_CHANGE); 

        var staleness_timeout = CURTAILMENT_VOLTAGE_ESTIMATE_STALENESS_TIMOUT_MS / power_level_change_factor;

        return ((Date.now() - this.last_uncurtailed_ts) > staleness_timeout);
    }

    isReliable() {
        return !this.uncurtailedVoltageIsStale();
    }

    updateEstimation(is_curtailed, pv_power) 
    {
        this.updateCurtailmentEstimate();

        this.power = pv_power / (1 - this.curtailment);

        if(!is_curtailed) {
            this.uncurtailed_panel_voltage = this.smoothed_panel_voltage;
            this.last_uncurtailed_ts = Date.now();
            this.last_uncurtailed_power = this.power;
        } else if(this.uncurtailed_panel_voltage > this.smoothed_panel_voltage) {
            // This theoretically should not happen - correct in the right
            // direction but do not update the time stamp
            console.log("In curtailment but uncurtailed " + this.uncurtailed_panel_voltage + "V > current " + this.smoothed_panel_voltage +"V.");
            this.uncurtailed_panel_voltage = this.smoothed_panel_voltage;
        }

        this.smoothed_power = smooth(this.smoothed_power, this.power, this.POWER_SMOOTHING_DYNAMICS);
        
    }

    process(pv_power) 
    {
        this.panel_voltage = getState(this.string_voltage_obj).val / this.nr_string_panels;
        this.smoothed_panel_voltage = smooth(this.smoothed_panel_voltage, this.panel_voltage, this.MPPT_DYNAMICS);
    }

    writeState() {
        setState(this.SCRIPT_UNCURTAILED_PANEL_VOLTAGE_OBJ, this.uncurtailed_panel_voltage, true);
        setState(this.SCRIPT_UNCURTAILED_PANEL_VOLTAGE_POWER_OBJ, this.last_uncurtailed_power, true);
        setState(this.SCRIPT_SMOOTHED_PANEL_VOLTAGE_OBJ, this.smoothed_panel_voltage, true);
        setState(this.SCRIPT_MPPT_POWER_ESTIMATE_OBJ, this.power, true);
        setState(this.SCRIPT_CURTAILMENT_PERCENT_ESTIMATE_OBJ, this.curtailment * 100, true);
    }
}