/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
// PV curtailment estimate from Inverter MPPT (Maximum Power Point Tracking) via measured Panel voltage
class MpptCurtailmentEstimator {
    constructor(parent_root_obj, string_voltage_obj, nr_string_panels) {
        this.SCRIPT_DEBUG = false;
        this.TEST = true;
        this.MPPT_DYNAMICS = 0.1;
        this.POWER_SMOOTHING_DYNAMICS = 0.01;

        this.string_voltage_obj = string_voltage_obj;
        this.nr_string_panels = nr_string_panels;

        this.curtailment = 0;
        this.power = 0;
        this.smoothed_power = 0;
        this.uncurtailed_panel_voltage = -1;
        this.corrected_uncurtailed_voltage = -1;
        this.last_uncurtailed_ts = 0;
        this.last_uncurtailed_power = 0;
        this.last_uncurtailed_temperature = 0;
        this.smoothed_panel_voltage = 0;
        this.panel_voltage = 0;

        this.root_obj = parent_root_obj + '.mppt';
        this.CURTAILMENT_PERCENT_ESTIMATE_OBJ = this.root_obj + ".curtailment";
        createState(this.CURTAILMENT_PERCENT_ESTIMATE_OBJ, 0, {read: true, write: false, name: "CurtailmentPercentEstimate", type: "number", unit: "%", def: 0});
        this.MPPT_POWER_ESTIMATE_OBJ = this.root_obj + ".power";
        createState(this.MPPT_POWER_ESTIMATE_OBJ, 0, {read: true, write: false, name: "PowerEstimate", type: "number", unit: "W", def: 0});
        this.SMOOTHED_PANEL_VOLTAGE_OBJ = this.root_obj + ".smoothed_panel_voltage";
        createState(this.SMOOTHED_PANEL_VOLTAGE_OBJ, 0, {read: true, write: false, name: "SmoothedPanelVoltage", type: "number", unit: "V", def: 0});
        this.UNCURTAILED_PANEL_VOLTAGE_OBJ = this.root_obj + ".uncurtailed_panel_voltage";
        createState(this.UNCURTAILED_PANEL_VOLTAGE_OBJ, 0, {read: true, write: false, name: "UncurtailedPanelVoltage", type: "number", unit: "V", def: 0});
        this.UNCURTAILED_PANEL_VOLTAGE_POWER_OBJ = this.root_obj + ".uncurtailed_panel_voltage_power";
        createState(this.UNCURTAILED_PANEL_VOLTAGE_POWER_OBJ, 0, {read: true, write: false, name: "UncurtailedPanelVoltagePowerLevel", type: "number", unit: "W", def: 0});
        this.UNCURTAILED_CORR_PANEL_VOLTAGE_OBJ = this.root_obj + ".uncurtailed_corrected_panel_voltage";
        createState(this.UNCURTAILED_CORR_PANEL_VOLTAGE_OBJ, 0, {read: true, write: false, name: "UncurtailedCorrectedPanelVoltage", type: "number", unit: "V", def: 0});
        this.UNCURTAILED_PANEL_VOLTAGE_TEMPERATURE_OBJ = this.root_obj + ".uncurtailed_panel_voltage_temperature";
        createState(this.UNCURTAILED_PANEL_VOLTAGE_TEMPERATURE_OBJ, 0, {read: true, write: false, name: "UncurtailedPanelVoltageTemperature", type: "number", unit: "째C", def: 0});

        this.restoreState();
        this.temp_tracker = new MpptPanelTempTracker(this.root_obj);

        if(this.TEST) {
            // Temperature Voltage Correction Testing
            this.test_reference_voltage = this.uncurtailed_panel_voltage;
            this.test_reference_temperature = this.last_uncurtailed_temperature;
            this.test_reference_power = this.last_uncurtailed_power;
            this.test_corrected_voltage = this.uncurtailed_panel_voltage;
            this.TEST_CORR_PANEL_VOLTAGE_OBJ = this.root_obj + ".test_corrected_panel_voltage";
            createState(this.TEST_CORR_PANEL_VOLTAGE_OBJ, 0, {read: true, write: false, name: "TestCorrectedPanelVoltage", type: "number", unit: "V", def: 0});
        }
    }

    getCurtailmentPercent() { return this.curtailment; }
    getPower() {return this.power; }
    getPanelTemperature() { return this.temp_tracker.getPanelTemperature(); }
    restoreState() {
        var state = getState(this.UNCURTAILED_PANEL_VOLTAGE_OBJ);
        this.uncurtailed_panel_voltage = state.val;
        this.last_uncurtailed_ts = state.lc;
        this.last_uncurtailed_power = getState(this.UNCURTAILED_PANEL_VOLTAGE_POWER_OBJ).val;
        this.last_uncurtailed_temperature = getState(this.UNCURTAILED_PANEL_VOLTAGE_TEMPERATURE_OBJ).val;
        console.log("Updating uncurtailed panel voltage from state: " + this.uncurtailed_panel_voltage + "V @ " + this.last_uncurtailed_power + "W with " + this.last_uncurtailed_temperature + "째C.");
    }

    calculatePowerVoltageCorrection(reference_power) {
        // Heuristic data: 12kW => +1.8V => 0.15V/kW. 7kW (slower) => 0.5V => 0.1V/kW => 0.003125V/(W/m2)
        const PANEL_POWER_VOLTAGE_COEFFICIENT = 0.1 / 1000; // 0.1V/kW
        return PANEL_POWER_VOLTAGE_COEFFICIENT * (this.getPower() - reference_power);
    }
    
    testVoltageCorrection() {
        if(Math.floor(Date.now()/1000) % 3600 == 0) {
            this.test_reference_voltage = this.smoothed_panel_voltage;
            this.test_reference_temperature = this.getPanelTemperature();
            this.test_reference_power = this.getPower();
            if(this.SCRIPT_DEBUG) {
                log("Updating test reference voltage: " + this.test_reference_voltage + "V @ " + this.test_reference_power + "W with " + this.test_reference_temperature + "째C.");
            }
        }

        var power_voltage_correction = this.calculatePowerVoltageCorrection(this.test_reference_power);
        var temperature_corrected_voltage = this.temp_tracker.correctVoltage(this.test_reference_voltage, this.test_reference_temperature);
        this.test_corrected_voltage = temperature_corrected_voltage + power_voltage_correction;
        setState(this.TEST_CORR_PANEL_VOLTAGE_OBJ, this.test_corrected_voltage, true);
    }


    updateCurtailmentEstimate()
    {
        var mppt_voltage_offset = this.smoothed_panel_voltage - this.corrected_uncurtailed_voltage;

        if(mppt_voltage_offset < 0.25) {
            // Voltage within error margin around peak power or below - assume no curtailment
            this.curtailment = 0;
        } else if (mppt_voltage_offset < 10) {
            // Power curve estimation further away from peak power is -10%/V
            var net_mppt_voltage_offset = mppt_voltage_offset - 0.25;
            this.curtailment = 0.1*net_mppt_voltage_offset;
        } else {
            // Voltage way above - something is strange
            this.curtailment = 0;
        }
    }

    uncurtailedVoltageIsStale() {
        const CURTAILMENT_VOLTAGE_ESTIMATE_STALENESS_TIMOUT_MS = 2*60*60*1000;
        const NORM_POWER_LEVEL_CHANGE = 5000;
        
        // The uncurtailed MPTT voltage is highly temperature-dependent, in addition
        // to having some correlation with irradiance. If we operate a prolonged time
        // in curtailed mode, without opportunity to get a fresh sampling of the current
        // uncurtailed voltage, we lose accuracy.
        // Here, we simply take the irradiance (~estimated power) as proxy for the temperature,
        // postulating that the panels will heat up very fast in the sun. Therefore, the higher
        // the change in power since the last uncurtailed measurements, the faster our uncurtailed
        // voltage estimation becomes stale.
        var power_level_change = Math.abs(this.smoothed_power - this.last_uncurtailed_power);
        var power_level_change_factor = 1 + (power_level_change / NORM_POWER_LEVEL_CHANGE); 

        var staleness_timeout = CURTAILMENT_VOLTAGE_ESTIMATE_STALENESS_TIMOUT_MS / power_level_change_factor;

        return ((Date.now() - this.last_uncurtailed_ts) > staleness_timeout);
    }

    isReliable() {
        return !this.uncurtailedVoltageIsStale();
    }

    updateEstimation(is_curtailed, pv_power) 
    {
        var power_voltage_correction = this.calculatePowerVoltageCorrection(this.last_uncurtailed_power);
        var temperature_corrected_voltage = this.temp_tracker.correctVoltage(this.uncurtailed_panel_voltage, this.last_uncurtailed_temperature);
        this.corrected_uncurtailed_voltage = temperature_corrected_voltage + power_voltage_correction;

        if(!is_curtailed) {
            this.uncurtailed_panel_voltage = this.smoothed_panel_voltage;
            this.last_uncurtailed_ts = Date.now();
            this.last_uncurtailed_power = this.power;
            this.last_uncurtailed_temperature = this.temp_tracker.getPanelTemperature();
        } else {
            if(this.corrected_uncurtailed_voltage > this.smoothed_panel_voltage) {
                // A strong drop in voltage happens often at the end of a cloud gap while we conservatively still 
                // assume that we are curtailed or with intermediate short darkenings of the sun
                // - correct in the right direction but do not update the time stamp
                if(this.SCRIPT_DEBUG) {
                    console.log("In curtailment but corrected uncurtailed " + this.corrected_uncurtailed_voltage + "V > current " + this.smoothed_panel_voltage +"V.");
                }
                this.uncurtailed_panel_voltage = this.smoothed_panel_voltage;
                this.last_uncurtailed_power = this.power;
                this.last_uncurtailed_temperature = this.temp_tracker.getPanelTemperature();
            }
        }
        // TODO: Predict the voltage drop due to heating in "clouds with gaps" situations
        // On 2025-03-23 (Temp: ~14째, clouded power ~6kW, gap power: ~20kW) observed:
        // -1.6V/15 Minutes => -0.00178V/s
        // -0.69V/5.5Minutes => -0.002V/s
        
        this.updateCurtailmentEstimate();
        this.power = pv_power / (1 - this.curtailment);

        this.smoothed_power = smooth(this.smoothed_power, this.power, this.POWER_SMOOTHING_DYNAMICS);
        
    }

    process(irradiance) 
    {
        this.panel_voltage = getState(this.string_voltage_obj).val / this.nr_string_panels;
        this.smoothed_panel_voltage = smooth(this.smoothed_panel_voltage, this.panel_voltage, this.MPPT_DYNAMICS);

        this.temp_tracker.process(irradiance);
    }

    writeState() {
        setState(this.UNCURTAILED_PANEL_VOLTAGE_OBJ, this.uncurtailed_panel_voltage, true);
        setState(this.UNCURTAILED_CORR_PANEL_VOLTAGE_OBJ, this.corrected_uncurtailed_voltage, true);
        setState(this.UNCURTAILED_PANEL_VOLTAGE_POWER_OBJ, this.last_uncurtailed_power, true);
        setState(this.UNCURTAILED_PANEL_VOLTAGE_TEMPERATURE_OBJ, this.last_uncurtailed_temperature, true);
        setState(this.SMOOTHED_PANEL_VOLTAGE_OBJ, this.smoothed_panel_voltage, true);
        setState(this.MPPT_POWER_ESTIMATE_OBJ, this.power, true);
        setState(this.CURTAILMENT_PERCENT_ESTIMATE_OBJ, this.curtailment * 100, true);

        this.temp_tracker.writeState();

        if(this.TEST) {
            this.testVoltageCorrection();
        }
    }
}