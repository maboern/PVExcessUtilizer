/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
// PV curtailment estimate from Inverter MPPT (Maximum Power Point Tracking) via measured Panel voltage
class MpptCurtailmentEstimator {
    constructor(script_id, string_voltage_obj, nr_string_panels) {
        this.SCRIPT_DEBUG = false;
        this.MPPT_DYNAMICS = 0.1;
        this.POWER_SMOOTHING_DYNAMICS = 0.01;

        this.script_id = script_id;
        this.string_voltage_obj = string_voltage_obj;
        this.nr_string_panels = nr_string_panels;

        this.curtailment = 0;
        this.power = 0;
        this.smoothed_power = 0;
        this.uncurtailed_panel_voltage = -1;
        this.last_uncurtailed_ts = 0;
        this.last_uncurtailed_power = 0;
        this.smoothed_panel_voltage = 0;
        this.panel_voltage = 0;

        this.root_obj = script_id + '.info.mppt';
        this.SCRIPT_CURTAILMENT_PERCENT_ESTIMATE_OBJ = this.root_obj + ".curtailment";
        createState(this.SCRIPT_CURTAILMENT_PERCENT_ESTIMATE_OBJ, 0, {read: true, write: false, name: "CurtailmentPercentEstimate", type: "number", unit: "%", def: 0});
        this.SCRIPT_MPPT_POWER_ESTIMATE_OBJ = this.root_obj + ".power";
        createState(this.SCRIPT_MPPT_POWER_ESTIMATE_OBJ, 0, {read: true, write: false, name: "PowerEstimate", type: "number", unit: "W", def: 0});
        this.SCRIPT_SMOOTHED_PANEL_VOLTAGE_OBJ = this.root_obj + ".smoothed_panel_voltage";
        createState(this.SCRIPT_SMOOTHED_PANEL_VOLTAGE_OBJ, 0, {read: true, write: false, name: "SmoothedPanelVoltage", type: "number", unit: "V", def: 0});
        this.SCRIPT_UNCURTAILED_PANEL_VOLTAGE_OBJ = this.root_obj + ".uncurtailed_panel_voltage";
        createState(this.SCRIPT_UNCURTAILED_PANEL_VOLTAGE_OBJ, 0, {read: true, write: false, name: "UncurtailedPanelVoltage", type: "number", unit: "V", def: 0});
    }

    getCurtailmentPercent() { return this.curtailment; }
    getPower() {return this.power; }

    updateCurtailmentEstimate()
    {
        if(this.uncurtailed_panel_voltage < 0) {
            var state = getState(this.SCRIPT_UNCURTAILED_PANEL_VOLTAGE_OBJ);
            if(state.ts >= Date.now() - 30*60*1000) {
                this.uncurtailed_panel_voltage = state.val;
                console.log("Updating uncurtailed panel voltage from state: " + this.uncurtailed_panel_voltage + "V");
            } else {
                this.uncurtailed_panel_voltage = this.smoothed_panel_voltage;
                this.last_uncurtailed_ts = state.ts;
            }
        }

        var mppt_voltage_offset = this.smoothed_panel_voltage - this.uncurtailed_panel_voltage;

        if(mppt_voltage_offset < 0.25) {
            // Voltage within error margin around peak power or below - assume no curtailment
            this.curtailment = 0;
        } else if (mppt_voltage_offset < 10) {
            // Power curve estimation further away from peak power is -10%/V
            var net_mppt_voltage_offset = mppt_voltage_offset - 0.25;
            this.curtailment = 0.1*net_mppt_voltage_offset;
        } else {
            // Voltage way above - something is strange
            this.curtailment = 0;
        }
    }

    estimateIsStale() {
        const CURTAILMENT_VOLTAGE_ESTIMATE_STALENESS_TIMOUT_MS = 2*60*60*1000;
        const NORM_POWER_LEVEL_CHANGE = 2000;
        const MIN_POWER_LEVEL_CHANGE_FACTOR = 0.05;
        var power_level_change = Math.abs(this.smoothed_power - this.last_uncurtailed_power);
        var power_level_change_factor = power_level_change / NORM_POWER_LEVEL_CHANGE; 
        power_level_change_factor = Math.max(power_level_change_factor,MIN_POWER_LEVEL_CHANGE_FACTOR); // Prevent Division by zero
        var staleness_timeout = CURTAILMENT_VOLTAGE_ESTIMATE_STALENESS_TIMOUT_MS / power_level_change_factor;

        return (Date.now() - this.last_uncurtailed_ts > staleness_timeout);
    }

    updateEstimation(is_curtailed, pv_power) 
    {
        this.updateCurtailmentEstimate();

        this.power = pv_power / (1 - this.curtailment);

        if(!is_curtailed) {
            this.uncurtailed_panel_voltage = this.smoothed_panel_voltage;
            this.last_uncurtailed_ts = Date.now();
            this.last_uncurtailed_power = this.power;
        } 

        this.smoothed_power = smooth(this.smoothed_power, this.power, this.POWER_SMOOTHING_DYNAMICS);
    }

    process(partially_uncurtailed, pv_power) 
    {
        this.panel_voltage = getState(this.string_voltage_obj).val / this.nr_string_panels;
        this.smoothed_panel_voltage = smooth(this.smoothed_panel_voltage, this.panel_voltage, this.MPPT_DYNAMICS);

        if(partially_uncurtailed) {
             if(this.smoothed_panel_voltage < this.uncurtailed_panel_voltage) {
                console.debug("Partially uncurtailed - reducing uncurtailed panel voltage estimate (" + this.uncurtailed_panel_voltage + "V -> " + this.smoothed_panel_voltage + "V)");
                this.uncurtailed_panel_voltage = this.smoothed_panel_voltage;
             }
        }
    }

    writeState() {
        setState(this.SCRIPT_UNCURTAILED_PANEL_VOLTAGE_OBJ, this.uncurtailed_panel_voltage, true);
        setState(this.SCRIPT_SMOOTHED_PANEL_VOLTAGE_OBJ, this.smoothed_panel_voltage, true);
        setState(this.SCRIPT_MPPT_POWER_ESTIMATE_OBJ, this.power, true);
        setState(this.SCRIPT_CURTAILMENT_PERCENT_ESTIMATE_OBJ, this.curtailment * 100, true);
    }
}