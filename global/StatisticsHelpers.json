/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
function max(value, prev_max) {
    if(value > prev_max) {
        return value;
    }
    return prev_max;
}

function min(value, prev_min) {
    if(value < prev_min || prev_min == 0) {
        return value;
    }
    return prev_min;
}

function smooth(smoothed_value, new_value, dynamics) {
    if(smoothed_value == 0) {
        return new_value;
    } else {
        var diff = new_value - smoothed_value;
        return smoothed_value + (diff * dynamics);
    }
}

class RingBuffer {
    constructor(length) {
        this.length = length;
        this.clear();
    }

    clear() {
        this.pointer = 0;
        this.buffer = [];
        this.count = 0;
    }

    push(item) {
        this.buffer[this.pointer] = item;
        this.pointer = (this.length + this.pointer + 1) % this.length;
        this.count += 1;
    }

    hasJustWrapped() {
        return ((this.count > 0) && (this.count % this.length == 0));
    }

    set(array) {
        if(array.length <= this.length) {
            this.buffer = array.slice();
            this.count = array.length;
        } else {
            this.buffer = array.slice(array.length - this.length);
            this.count = this.length;
        }
    }

    linearize() {
        return this.buffer.slice(this.pointer).concat(this.buffer.slice(0, this.pointer));
    }

    last() {
        if(this.pointer - 1 >= 0) { return this.buffer[this.pointer - 1]; }
        return this.buffer[this.length - 1];
    }

    tail(count) {
        const linearized = this.linearize();
        var tail_buf = new RingBuffer(count);
        tail_buf.set(linearized.slice(-1*count));
        return tail_buf;
    }
    
    smooth(dynamics) {
        const linearized = this.linearize();
        return linearized.reduce((a,b) => a + (b - a)*dynamics);
    }

    max() {
        return Math.max.apply(Math, this.buffer);
    }

    min() {
        return Math.min.apply(Math, this.buffer);
    }

    avg() {
        return this.buffer.reduce((p,c,_,a) => p + c/a.length, 0);
    }

    sum() {
        return this.buffer.reduce((a, b) => a + b, 0);
    }

    spread() {
        return this.max() - this.min();
    }

    sorted() {
        return this.buffer.concat().sort((a, b) => a - b);
    }

    percentile(p) { return this.quantile(p/100); }
    quantile(q) {
        const sorted = this.sorted();
        const pos = (sorted.length - 1)*q;
        const base = Math.floor(pos);
        const rest = pos - base;
        if (sorted[base + 1] !== undefined) {
            return sorted[base] + rest * (sorted[base + 1] - sorted[base]);
        } else {
            return sorted[base];
        }
    }

    std() {
        const mu = this.avg();
        const diffArr = this.buffer.map(a => (a - mu) ** 2);
        const diffSum = diffArr.reduce((a, b) => a + b, 0);
        return Math.sqrt(diffSum / (this.length - 1));
    }
}