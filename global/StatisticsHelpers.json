/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
function max(value, prev_max) {
    if(value > prev_max) {
        return value;
    }
    return prev_max;
}

function min(value, prev_min) {
    if(value < prev_min || prev_min == 0) {
        return value;
    }
    return prev_min;
}

function smooth(smoothed_value, new_value, dynamics) {
    if(smoothed_value == 0) {
        return new_value;
    } else {
        var diff = new_value - smoothed_value;
        return smoothed_value + (diff * dynamics);
    }
}

function addMinutes(date, minutes) {
    return new Date(date.getTime() + minutes*60000);
}

class RingBuffer {
    constructor(length) {
        this.pointer = 0;
        this.length = length;
        this.buffer = [];
    }

    push(item) {
        this.buffer[this.pointer] = item;
        this.pointer = (this.length + this.pointer + 1) % this.length;
    }

    max() {
        return Math.max.apply(Math, this.buffer);
    }

    min() {
        return Math.min.apply(Math, this.buffer);
    }

    avg() {
        return this.buffer.reduce((p,c,_,a) => p + c/a.length, 0);
    }

    spread() {
        return this.max() - this.min();
    }
}