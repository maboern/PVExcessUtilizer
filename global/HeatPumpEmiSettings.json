/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
const HEATPUMP_EMI_SETTINGS = Object.freeze({
    DEFAULT : "DEFAULT",      // Original Default: EMI on
    OFF : "OFF",              // EMI off
    EFFICIENT : "EFFICIENT",  // EMI on, low temperatures for efficient heating by heat pump
    MAX_BUFFER : "MAX_BUFFER" // EMI on, goes beyond DEFAULT with high temperature to maximize storing of energy
});


class HeatPumpEmiSettings {
    constructor(settings, root_obj) {
        this.warmwater_temp_obj = 'stiebel-isg.0.settings.ENERGIEMANAGEMENT.val60312';/*Obere warmwasser solltemp*/
        this.heating_buffer_temp_obj = 'stiebel-isg.0.settings.ENERGIEMANAGEMENT.val60310';/*Obere raum/puffertemp  hk1*/
        this.emi_on_obj = 'stiebel-isg.0.settings.ENERGIEMANAGEMENT.val60302';

        this.min_change_period_s = 5*60;
        this.last_change_ts = 0;

        this.root_obj = root_obj + '.emi';
        this.EMI_SETTINGS_OBJ = this.root_obj + ".settings";
        createState(this.EMI_SETTINGS_OBJ, HEATPUMP_EMI_SETTINGS.DEFAULT, {read: true, write: false, name: "EMI Settings", type: "string", def: "UNKNOWN"});

        this.set(settings); // Set but do not apply TODO: Load from ISG Web state.
    }

    restoreState() {
        if(this.root_obj) {
            this.set(getState(this.EMI_SETTINGS_OBJ).val);
            console.info("EMI Settings restored " + this.toString());
        } else {
            console.warn("Could not restore HeatPump EMI from state!");
        }
    }
    
    toString() {
        return this.settings + " (EMI=" + this.emi_on + ", water=" + this.warmwater_temp + "°C, heating=" + this.heating_buffer_temp + "°C)";
    }
    get() { return this.settings; }
    getEmiOn() { return this.emi_on; }
    getWarmWaterTemp() { return this.warmwater_temp; }
    getHeatingBufferTemp() { return this.heating_buffer_temp; }

    set(settings) {
        switch(settings) {
            case HEATPUMP_EMI_SETTINGS.DEFAULT:
                this.setDefaultValues();
                break;
            case HEATPUMP_EMI_SETTINGS.EFFICIENT:
                this.setEfficientValues();
                break;
            case HEATPUMP_EMI_SETTINGS.MAX_BUFFER:
                this.setMaxBufferValues();
                break;
            case HEATPUMP_EMI_SETTINGS.OFF:
                this.setOff();
                break;
            default:
                console.warn("Cannot set invalid settings: " + settings);
        }
    }

    readyToChange() {
        return (Date.now() - this.last_change_ts > this.min_change_period_s*1000);
    }


    apply(settings, force) {
        let changed = (settings != this.settings);
        if(changed || force) {
            this.set(settings);
            this.applyState();
        }
    }

    applyState() {
        setState(this.emi_on_obj, this.emi_on);
        setState(this.warmwater_temp_obj, this.warmwater_temp);
        setState(this.heating_buffer_temp_obj, this.heating_buffer_temp);
        setState(this.EMI_SETTINGS_OBJ, this.settings, true);
        this.last_change_ts = Date.now();
        console.log("Applied heatpump EMI settings " + this.toString());
    }

    setDefaultValues() {
        this.emi_on = 1;
        this.warmwater_temp = 48;
        this.heating_buffer_temp = 45;
        this.settings = HEATPUMP_EMI_SETTINGS.DEFAULT;
    }
    setMaxBufferValues() {
        this.emi_on = 1;
        this.warmwater_temp = 53;
        this.heating_buffer_temp = 48;
        this.settings = HEATPUMP_EMI_SETTINGS.MAX_BUFFER;
    }
    setEfficientValues() {
        this.emi_on = 1;
        this.warmwater_temp = 48;
        this.heating_buffer_temp = 38;
        this.settings = HEATPUMP_EMI_SETTINGS.EFFICIENT;
    }
    setOff() {
        this.emi_on = 0;
        this.warmwater_temp = 42;
        this.heating_buffer_temp = 5;
        this.settings = HEATPUMP_EMI_SETTINGS.OFF;
    }
}

const DEFAULT_HEATPUMP_EMI_SETTINGS = new HeatPumpEmiSettings(HEATPUMP_EMI_SETTINGS.DEFAULT);
const HEATPUMP_EMI_OFF_SETTINGS = new HeatPumpEmiSettings(HEATPUMP_EMI_SETTINGS.OFF);
const EFFICIENT_HEATPUMP_EMI_SETTINGS = new HeatPumpEmiSettings(HEATPUMP_EMI_SETTINGS.EFFICIENT);
const MAX_BUFFER_HEATPUMP_EMI_SETTINGS = new HeatPumpEmiSettings(HEATPUMP_EMI_SETTINGS.MAX_BUFFER);