/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
/*
Strategy: Excess
Mode: Efficient Heating, Buffering (once boiler not feasible anymore)
EMI Setting: MaxBuffer

Strategy: Surplus
Mode: Efficient, Buffering (once required = remaining + 1h OR if excess)
EMI Setting: MaxBuffer

Strategy: Greedy
Mode: Modulated, Buffering (if high surplus)
EMI Setting: MaxBuffer

*/
const HEATPUMP_MODE = Object.freeze({
    EFFICIENT : "EFFICIENT",  // Lowest power possible for heatpump to be most efficient.
    EFFICIENT_HEATING_ONLY : "EFFICIENT HEATING ONLY",  // Same as Efficient, but only for heating (no warm water)
    MODULATED : "MODULATED", // Modulate heatpump power to follow available solar surplus
    BUFFERING : "BUFFERING", // Try to fill buffers as fast as possible with available surplus energy.
    EFFICIENT_BUFFERING : "EFFICIENT BUFFERING", // Same as Buffering, but keep heatpump lower in an efficient regime
});
const SPECIFIC_HEAT_CAPACITY_WATER_KWH = 4.186 / 3600; // 4.186 kJ/kg·°C; 3600 kJ/kWh

class HeatPump {
      constructor(root_obj, boiler) {
        this.root_obj = root_obj + ".heatpump";
        this.semp_client = new HeatPumpSempClient(this.root_obj);
        this.boiler = boiler;
        this.DEBUG = false;

        this.mode = HEATPUMP_MODE.EFFICIENT;

        this.heating_buffer_temp_obj = 'stiebel-isg.0.info.ANLAGE.HEIZUNG.PUFFERISTTEMPERATUR';
        this.target_heating_buffer_temp_obj = 'stiebel-isg.0.info.ANLAGE.HEIZUNG.PUFFERSOLLTEMPERATUR';
        this.target_hk2_temp_obj = 'stiebel-isg.0.info.ANLAGE.HEIZUNG.SOLLTEMPERATUR_HK_2';
        this.target_hk3_temp_obj = 'stiebel-isg.0.info.ANLAGE.HEIZUNG.SOLLTEMPERATUR_HK_3';
        this.summer_mode_obj = 'stiebel-isg.0.info.STATUSANLAGE.BETRIEBSSTATUS.SOMMERBETRIEB';
        this.hk2_pump_obj = 'stiebel-isg.0.info.STATUSANLAGE.STATUS_ANLAGE.HEIZKREISPUMPE_2';
        this.hk3_pump_obj = 'stiebel-isg.0.info.STATUSANLAGE.STATUS_ANLAGE.HEIZKREISPUMPE_3';

        this.required_boiler_runtime = 0;
        this.required_warmwater_runtime = 0;
        this.required_heating_runtime = 0;

        this.min_heatpump_runtime_mins = 15; // Do not start the heatpump if it is expected to run less than that time.
        this.heating_buffer_volume = 400; // 400 l
        // TODO: Make temperature-dependent.
        this.heating_expected_power = 1500; 
        this.warmwater_expected_power = 2500; // 1.5kW@35° 1.9kW@44°, 2.7kW@48°, 5kW@55° (7kW output, 10° outside)
        this.heatpump_efficiency_factor = 4 // How much heat energy the heat pump gets out for putting electric energy in

        this.HK2_PUMP_OBJ = this.root_obj + ".hk2_pump";
        createState(this.HK2_PUMP_OBJ, false, {read: true, write: false, name: "Pump HK2", type: "boolean", def: false});
        this.HK3_PUMP_OBJ = this.root_obj + ".hk3_pump";
        createState(this.HK3_PUMP_OBJ, false, {read: true, write: false, name: "Pump HK3", type: "boolean", def: false});

        this.updateState();
    }  
    
    setMode(new_mode) {
        if(new_mode != this.mode) {
            this.mode = new_mode;
            console.log("Changing Heatpump mode to " + new_mode + ".");
        }
        this.updateState();
    }
    getMode() { return this.mode; }

    isInSummerMode() {
        return getStateIfExisting(this.summer_mode_obj, false);
    }

    getHeatingBufferTemp() {
        return getStateIfExistingWithMaxAge(this.heating_buffer_temp_obj, 3*60*60, this.getTargetSettings().getHeatingBufferTemp());
    }

    getTargetHeatingBufferTemp() {
        return getStateIfExistingWithMaxAge(this.target_heating_buffer_temp_obj, 3*60*60, this.getTargetSettings().getHeatingBufferTemp());
    }

    calculateTargetModulatedHeatingBufferTemp() {
        let target_hk2_temp = getStateIfExistingWithMaxAge(this.target_hk2_temp_obj, 3*60*60, this.getTargetSettings().getHeatingBufferTemp());
        let target_hk3_temp = getStateIfExistingWithMaxAge(this.target_hk3_temp_obj, 3*60*60, this.getTargetSettings().getHeatingBufferTemp());
        return Math.max(target_hk2_temp, target_hk3_temp);
    }

    calculateHeatingRunMinsRequired(target_temperature) {
        var energy_kwh = this.calculateHeatingEnergyRequired(target_temperature);
        var time_hours = (energy_kwh * 1000) / (this.heating_expected_power * this.heatpump_efficiency_factor);
        return Math.round(time_hours * 60);
    }
    
    calculateHeatingEnergyRequired(target_temperature) {
        if(this.isInSummerMode()) {
            return 0;
        }
        
        let buffer_temperature = this.getHeatingBufferTemp();
        var temperature_diff = target_temperature - buffer_temperature;
        if(temperature_diff < 0) {
            temperature_diff = 0;
        }
        var boiler_kwh_per_degree = this.heating_buffer_volume * SPECIFIC_HEAT_CAPACITY_WATER_KWH;
        var required_energy_kwh = boiler_kwh_per_degree * temperature_diff;
        if(this.DEBUG) { console.log("Heating Buffer Target: " + target_temperature + "°C, Current: " + buffer_temperature + " => Energy: " + required_energy_kwh + "kWh");}
        return required_energy_kwh;
    }

    calculateWarmWaterRunMinsRequired(target_temperature) {
        var energy_kwh = this.calculateWarmWaterEnergyRequired(target_temperature);
        var time_hours = (energy_kwh * 1000) / (this.warmwater_expected_power * this.heatpump_efficiency_factor);
        return Math.round(time_hours * 60);
    }

    calculateBoilerRunMinsRequired(target_temperature) {
        var energy_kwh = this.calculateWarmWaterEnergyRequired(target_temperature);
        var time_hours = (energy_kwh * 1000) / this.boiler.getExpectedPower();
        return Math.round(time_hours * 60);
    }

    calculateWarmWaterEnergyRequired(target_temperature) {
        var temperature_diff = target_temperature - this.boiler.getTemperature();
        if(temperature_diff < 0) {
            temperature_diff = 0;
        }
        var kwh_per_degree = this.boiler.getVolume() * SPECIFIC_HEAT_CAPACITY_WATER_KWH;
        var required_energy_kwh = kwh_per_degree * temperature_diff;
        if(this.DEBUG) { console.log("Warm Water Target: " + target_temperature + "°C, Current: " + this.boiler.getTemperature() + " => Energy: " + required_energy_kwh + "kWh");}
        return required_energy_kwh;
    }

    isWarmWaterAllowedToStart() {  return (this.required_warmwater_runtime >= this.min_heatpump_runtime_mins); }
    isWarmWaterAllowedToStop() { return this.isWarmWaterOn() && this.semp_client.isWarmWaterControllable(); }
    isWarmWaterOn() { return this.semp_client.isWarmWaterOn(); }

    isHeatingAllowedToStart() { return (this.required_heating_runtime >= this.min_heatpump_runtime_mins);  }
    isHeatingAllowedToStop() {return this.isHeatingOn() && this.semp_client.isHeatingControllable(); }
    isHeatingOn() { return this.semp_client.isHeatingOn(); }

    isAllowedToStart() { return (this.isWarmWaterAllowedToStart() || this.isHeatingAllowedToStart());  }
    isOn() { return this.isWarmWaterOn() || this.isHeatingOn(); }
    getRequiredWarmWaterRunTime() { return this.required_warmwater_runtime; }
    getRequiredBoilerRunTime() { return this.required_boiler_runtime; }
    getRequiredHeatingRunTime() { return this.required_heating_runtime; }
    getExpectedWarmWaterPower() { return this.warmwater_expected_power; }
    getExpectedHeatingPower() { return this.heating_expected_power; }
    getExpectedBoilerPower() { return this.boiler.getExpectedPower(); }

    getCurrentPower() { return this.semp_client.getHeatingPower() + this.semp_client.getWarmWaterPower(); }

    hasReachedWarmWaterTemp() { return this.boiler.getTemperature() >= this.getTargetSettings().getWarmWaterTemp(); }
    hasReachedHeatingBufferTemp() { return this.getHeatingBufferTemp() >= this.getTargetSettings().getHeatingBufferTemp(); }

    controlBuffering(min_available_power, max_available_power) {
        this.controlMaxBufferingHeating(min_available_power, max_available_power);
        this.controlWarmWater(min_available_power, max_available_power);
    }

    controlBufferingEfficient(min_available_power, max_available_power) {
        this.controlEfficientHeating(min_available_power, max_available_power);
        this.controlWarmWater(min_available_power, max_available_power);
    }

    controlEfficient(min_available_power, max_available_power) {
        this.controlEfficientHeating(min_available_power, max_available_power);
        this.controlWarmWater(min_available_power, max_available_power);
    }

    controlModulated(min_available_power, max_available_power) {
        this.controlModulatedHeating(min_available_power, max_available_power);
        this.controlWarmWater(min_available_power, max_available_power);
    }

    controlWarmWater(min_available_power, max_available_power) {
        let expected_power_consumption = this.isWarmWaterOn() ? this.semp_client.getWarmWaterPower() : this.warmwater_expected_power;
        if(this.isWarmWaterAllowedToStart() || (this.isWarmWaterOn() && this.semp_client.isWarmWaterControllable())) {
            if(min_available_power >= expected_power_consumption && !this.hasReachedWarmWaterTemp()) {
                if(this.semp_client.requestWarmWater(true, false)) {
                    console.log("Requested WarmWater ON with min power: " + min_available_power + "W / " + expected_power_consumption + "W");
                }
            } 
        }
        if(this.isWarmWaterAllowedToStop()) {
            if(max_available_power < expected_power_consumption) {
                if(this.semp_client.requestWarmWater(false, false)) {
                    console.log("Requested WarmWater OFF because of low available power: " + max_available_power + "W / " + expected_power_consumption + "W");
                }
            } else if(this.hasReachedWarmWaterTemp()) {
                if(this.semp_client.requestWarmWater(false, false)) {
                    console.log("Requested WarmWater OFF because of reaching warmwater temp of " + this.getTargetSettings().getWarmWaterTemp() + "°C");
                }
            }
        }
    }

    controlHeating(min_available_power, max_available_power, recommended_power) {
        let min_heating_power = this.semp_client.getHeatingMinPower(); 
        if(this.isHeatingAllowedToStart() || (this.isHeatingOn() && this.semp_client.isHeatingControllable())) {
            if(min_available_power >= min_heating_power && !this.hasReachedHeatingBufferTemp()) {
                if(this.semp_client.requestHeating(recommended_power, false)) {
                    console.log("Requested Heating ON with recommended power: " + recommended_power + "W / " + min_heating_power + "W");
                }
            } 
        }
        if(this.isHeatingAllowedToStop()) {
            if(max_available_power < min_heating_power) {
                if(this.semp_client.requestHeating(0, false)) {
                    console.log("Requested Heating OFF because of low available power: " + max_available_power + "W / " + min_heating_power + "W");
                }
            } else if(this.hasReachedHeatingBufferTemp()) {
                if(this.semp_client.requestHeating(0, false)) {
                    console.log("Requested Heating OFF because of reaching heating buffer temp of " + this.getTargetSettings().getHeatingBufferTemp() + "°C");
                }
            }
        }
    }

    calculateModulatedHeatingPower(min_available_power, max_available_power) {
        const TARGET_TEMP_INFLUENCE = 100;
        let min_power = this.semp_client.getHeatingMinPower();

        let cur_power = this.isHeatingOn() ? this.semp_client.getHeatingPower() : min_power;
        let temp_diff = this.calculateTargetModulatedHeatingBufferTemp() - this.getHeatingBufferTemp();

        let desired_power = temp_diff > 0 ? min_available_power : max_available_power;
        let power_diff = desired_power - cur_power;

        let availability_factor = Math.min((10 + temp_diff) / 10, 1); // 10° difference makes available power ignored.
        let availability_offset = power_diff * availability_factor;
        let target_offset = temp_diff * TARGET_TEMP_INFLUENCE;
        let recommended_power = Math.min(cur_power + availability_offset + target_offset, desired_power);
        recommended_power = Math.max(recommended_power, min_power);
        console.log("Modulating Heating Power: " + recommended_power + "W - Availability: " + availability_offset + "W (" + power_diff + "W), Target: " + target_offset + "W (" + temp_diff + "°C).");
        return recommended_power;
    }

    controlModulatedHeating(min_available_power, max_available_power) {
        let modulated_heating_power = this.calculateModulatedHeatingPower(min_available_power, max_available_power); 
        this.controlHeating(min_available_power, max_available_power, modulated_heating_power);
    }

    controlEfficientHeating(min_available_power, max_available_power) {
        this.controlHeating(min_available_power, max_available_power, this.semp_client.getHeatingMinPower());
    }

    controlMaxBufferingHeating(min_available_power, max_available_power) {
        let recommended_power = Math.min(min_available_power, 3500);
        this.controlHeating(min_available_power, max_available_power, recommended_power);
    }

    control(min_available_power, max_available_power) {
        switch(this.mode) {
            case HEATPUMP_MODE.EFFICIENT_HEATING_ONLY:
                this.controlEfficientHeating(min_available_power, max_available_power);
                break;
            case HEATPUMP_MODE.MODULATED:
                this.controlModulated(min_available_power, max_available_power);
                break;
            case HEATPUMP_MODE.EFFICIENT:
                this.controlEfficient(min_available_power, max_available_power);
                break;
            case HEATPUMP_MODE.BUFFERING:
                this.controlBuffering(min_available_power, max_available_power);
                break;
            case HEATPUMP_MODE.EFFICIENT_BUFFERING:
                this.controlBufferingEfficient(min_available_power, max_available_power);
                break;
            default:
                console.error("Unsupported HEATPUMP MODE: " + this.mode);
                break;

        }
    }

    getTargetSettings() {
        switch(this.mode) {
            case HEATPUMP_MODE.EFFICIENT_HEATING_ONLY:
            case HEATPUMP_MODE.EFFICIENT:
                return EFFICIENT_HEATPUMP_EMI_SETTINGS;
            case HEATPUMP_MODE.MODULATED:
                return DEFAULT_HEATPUMP_EMI_SETTINGS;
            case HEATPUMP_MODE.BUFFERING:
            case HEATPUMP_MODE.EFFICIENT_BUFFERING:
                return MAX_BUFFER_HEATPUMP_EMI_SETTINGS;
            default:
                console.error("Unsupported HEATPUMP MODE: " + this.mode);
                return DEFAULT_HEATPUMP_EMI_SETTINGS;
        }
    }

    updateState() {
        this.semp_client.updateState();
        
        let target = this.getTargetSettings();
        this.required_boiler_runtime = this.calculateBoilerRunMinsRequired(target.getWarmWaterTemp());   
        this.required_warmwater_runtime = this.calculateWarmWaterRunMinsRequired(target.getWarmWaterTemp()); 
        this.required_heating_runtime = this.calculateHeatingRunMinsRequired(target.getHeatingBufferTemp());

        this.hk2_pump_on = getStateIfExisting(this.hk2_pump_obj, false);
        setState(this.HK2_PUMP_OBJ, this.hk2_pump_on, true);
        this.hk3_pump_on = getStateIfExisting(this.hk3_pump_obj, false);
        setState(this.HK3_PUMP_OBJ, this.hk3_pump_on, true);

        this.semp_client.writeState();

    }
}