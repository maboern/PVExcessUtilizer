/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
const HEATPUMP_STRATEGY = Object.freeze({
    PASSIVE : "PASSIVE",  // Nothing to actively manage for the heatpump / boiler. This is the default.
    HEATPUMP_GREEDY : "HEATPUMP GREEDY", // Original Default: EMI on, use surplus early as available and do not consider excess unless by coincidence.
    HEATPUMP_ECONOMIC : "HEATPUMP ECONOMIC", // No boost at all, let it run run to minimal temperature
    AFTERNOON_GREEDY : "AFTERNOON GREEDY", // Run economic in the morning, use potential excess over noon and into the afternoon if necessary.
    EXCESS_ONLY : "EXCESS ONLY", // Only use excess solar energy (via Boiler load) to make warm water, no Heat Pump unless we do not make it
    HYBRID : "HYBRID" // Use Heatpump for minimal temperature, then boost opportunistically with excess solar
});
const SPECIFIC_HEAT_CAPACITY_WATER_KWH = 4.186 / 3600; // 4.186 kJ/kg·°C; 3600 kJ/kWh

class HeatPumpManager{
    constructor(root_obj, pv_forecast, boiler) {
        this.root_obj = root_obj + ".heatpump";
        this.pv_forecast = pv_forecast;
        this.semp_client = new HeatPumpSempClient(this.root_obj);
        this.boiler = boiler;
        this.DEBUG = false;

        this.heating_buffer_temp_obj = 'stiebel-isg.0.info.ANLAGE.HEIZUNG.PUFFERISTTEMPERATUR';
        this.summer_mode_obj = 'stiebel-isg.0.info.STATUSANLAGE.BETRIEBSSTATUS.SOMMERBETRIEB';
        this.hk2_pump_obj = 'stiebel-isg.0.info.STATUSANLAGE.STATUS_ANLAGE.HEIZKREISPUMPE_2';
        this.hk3_pump_obj = 'stiebel-isg.0.info.STATUSANLAGE.STATUS_ANLAGE.HEIZKREISPUMPE_3';

        this.strategy = HEATPUMP_STRATEGY.PASSIVE;
        this.strategy_chosen = false;
        this.emi_settings = new HeatPumpEmiSettings(HEATPUMP_EMI_SETTINGS.DEFAULT, this.root_obj);
        this.required_boiler_runtime = 0;
        this.required_warmwater_runtime = 0; // TODO: Replace with heatpump calculation
        this.required_heating_runtime = 0;
        this.remaining_boiler_excess_time = 0;
        this.remaining_heating_excess_time = 0; 
        this.remaining_warmwater_surplus_time = 0;
        this.remaining_heating_surplus_time = 0;
        this.hk2_pump_on = false;
        this.hk3_pump_on = false;

        this.excess_load_grace_period_mins = 15; // Grace period / tolerance for switching on loads before the excess / surplus energy window passes
        this.surplus_load_grace_period_mins = 60; // Grace period / tolerance for switching on loads before the excess / surplus energy window passes
        
        this.min_heatpump_runtime_mins = 10; // Do not start the heatpump if it is expected to run less than that time.
        this.heating_buffer_volume = 400; // 400 l
        // TODO: Make temperature-dependent.
        this.heating_expected_power = 3500; // The SHM pretty much goes to max power as long as there is surplus. TODO: Correct once we control it ourselves.
        this.warmwater_expected_power = 4000;
        this.heatpump_efficiency_factor = 4 // How much heat energy the heat pump gets out for putting electric energy in

        this.STRATEGY_OBJ = this.root_obj + ".strategy";
        createState(this.STRATEGY_OBJ, this.strategy, {read: true, write: false, name: "Strategy", type: "string", def: "UNKNOWN"});
        this.HK2_PUMP_OBJ = this.root_obj + ".hk2_pump";
        createState(this.HK2_PUMP_OBJ, false, {read: true, write: false, name: "Pump HK2", type: "boolean", def: false});
        this.HK3_PUMP_OBJ = this.root_obj + ".hk3_pump";
        createState(this.HK3_PUMP_OBJ, false, {read: true, write: false, name: "Pump HK3", type: "boolean", def: false});
        
        this.restoreState();
        this.updateState();
        this.reportStatus();
    }

    restoreState() {
        this.strategy = getState(this.STRATEGY_OBJ).val;
        this.strategy_chosen = isToday(getState(this.STRATEGY_OBJ).ts); 
        this.emi_settings.restoreState();
        console.log("Restored from state: Strategy = " + this.strategy + "");
    }

    resetDayValues() {
        this.strategy_chosen = false;
    }

    calculateHeatingRunMinsRequired(target_temperature) {
        var energy_kwh = this.calculateHeatingEnergyRequired(target_temperature);
        var time_hours = (energy_kwh * 1000) / (this.heating_expected_power * this.heatpump_efficiency_factor);
        return Math.round(time_hours * 60);
    }
    
    getIsgBooleanState(boolean_state) {
        if(existsState(boolean_state)) {
            let state = getState(boolean_state);
            if(state && state.val == true) {
                return true;
            }
        }
        return false;
    }

    isInSummerMode() {
        return this.getIsgBooleanState(this.summer_mode_obj);
    }

    calculateHeatingEnergyRequired(target_temperature) {
        if(this.isInSummerMode()) {
            return 0;
        }
        
        let buffer_temperature = getState(this.heating_buffer_temp_obj).val;
        var temperature_diff = target_temperature - buffer_temperature;
        if(temperature_diff < 0) {
            temperature_diff = 0;
        }
        var boiler_kwh_per_degree = this.heating_buffer_volume * SPECIFIC_HEAT_CAPACITY_WATER_KWH;
        var required_energy_kwh = boiler_kwh_per_degree * temperature_diff;
        if(this.DEBUG) { console.log("Heating Buffer Target: " + target_temperature + "°C, Current: " + buffer_temperature + " => Energy: " + required_energy_kwh + "kWh");}
        return required_energy_kwh;
    }

    calculateWarmWaterRunMinsRequired(target_temperature) {
        var energy_kwh = this.calculateWarmWaterEnergyRequired(target_temperature);
        var time_hours = (energy_kwh * 1000) / (this.warmwater_expected_power * this.heatpump_efficiency_factor);
        return Math.round(time_hours * 60);
    }

    calculateBoilerRunMinsRequired(target_temperature) {
        var energy_kwh = this.calculateWarmWaterEnergyRequired(target_temperature);
        var time_hours = (energy_kwh * 1000) / this.boiler.getExpectedPower();
        return Math.round(time_hours * 60);
    }

    calculateWarmWaterEnergyRequired(target_temperature) {
        var temperature_diff = target_temperature - this.boiler.getTemperature();
        if(temperature_diff < 0) {
            temperature_diff = 0;
        }
        var kwh_per_degree = this.boiler.getVolume() * SPECIFIC_HEAT_CAPACITY_WATER_KWH;
        var required_energy_kwh = kwh_per_degree * temperature_diff;
        if(this.DEBUG) { console.log("Warm Water Target: " + target_temperature + "°C, Current: " + this.boiler.getTemperature() + " => Energy: " + required_energy_kwh + "kWh");}
        return required_energy_kwh;
    }
    
    chooseStrategyIfNecessary() {
        let now = new Date();
        if(!this.strategy_chosen && now.getHours() >= 7) {
            this.chooseStrategy();
        }
    }
    
    chooseStrategy() {
        console.log("Choosing Strategy for today.");
        this.updateState();
        if(this.checkStrategyExcessOnlyFeasible()) {
            this.setStrategy(HEATPUMP_STRATEGY.EXCESS_ONLY);
            this.emi_settings.apply(HEATPUMP_EMI_SETTINGS.OFF, true);
        } else if(this.checkStrategyAfteroonGreedyFeasible()) {
            this.setStrategy(HEATPUMP_STRATEGY.AFTERNOON_GREEDY);
            this.emi_settings.apply(HEATPUMP_EMI_SETTINGS.EFFICIENT, true);
        } else {
            this.emi_settings.apply(HEATPUMP_EMI_SETTINGS.DEFAULT, true);
        }
        this.strategy_chosen = true;
    }

    updateAtSunrise() {
        this.updateState();
        this.chooseStrategy();
    }

    reportStatus()
    {
        let status = "STATUS (" + this.strategy + ") | ";
        status += "DEMAND: Water = " + this.required_warmwater_runtime + "m  /" + this.required_boiler_runtime + "m";
        if(!this.isInSummerMode()) { 
            status += ", Heat = " + this.required_heating_runtime + "m"; 
        }
        
        if(this.strategy == HEATPUMP_STRATEGY.EXCESS_ONLY) {
            status += " | EXCESS: Boiler = " + this.remaining_boiler_excess_time + "m";
            if(!this.isInSummerMode()) {
                status += ", Heat = " + this.remaining_heating_excess_time + "m"; 
            }
        } else {
            status += " | SURPLUS: Water = " + this.remaining_warmwater_surplus_time + "m";
            if(!this.isInSummerMode()) {
                status += ", Heat = " + this.remaining_heating_surplus_time + "m";
            }
        }
        console.log(status);
    }

    updateHourly() {
        this.chooseStrategyIfNecessary();
        this.reportStatus();
        if(this.DEBUG) {console.log("Last hour average power: " + this.pv_forecast.getLastHourAverageMeasuredPower() + "W");}
    }

    setStrategy(new_strategy) {
        this.strategy = new_strategy;
        setState(this.STRATEGY_OBJ, this.strategy, true);
        console.log("Set strategy to " + this.strategy + ".");
    }

    checkStrategyExcessOnlyFeasible() {
        let required_boiler_runtime = this.calculateBoilerRunMinsRequired(MAX_BUFFER_HEATPUMP_EMI_SETTINGS.getWarmWaterTemp());
        let required_heating_runtime = this.calculateHeatingRunMinsRequired(MAX_BUFFER_HEATPUMP_EMI_SETTINGS.getHeatingBufferTemp());

        // Assume that the heating by heatpump (with low power) will anyway still fit after the boiler heating.
        let remaining_boiler_time = this.pv_forecast.estimateRemainingExcessToday(this.boiler.getExpectedPower());
        let remaining_warmwater_time = this.pv_forecast.estimateRemainingExcessToday(this.warmwater_expected_power);

        let boiler_feasible = required_boiler_runtime + this.excess_load_grace_period_mins <= remaining_boiler_time;
        let heating_feasible = required_heating_runtime + this.excess_load_grace_period_mins <= remaining_warmwater_time;
        return boiler_feasible && heating_feasible;
    }

    checkStrategyAfteroonGreedyFeasible() {
        let required_warmwater_runtime = this.calculateWarmWaterRunMinsRequired(DEFAULT_HEATPUMP_EMI_SETTINGS.getWarmWaterTemp());
        let required_heating_runtime = this.calculateHeatingRunMinsRequired(DEFAULT_HEATPUMP_EMI_SETTINGS.getHeatingBufferTemp());
        let required_runtime = required_heating_runtime + required_warmwater_runtime;

        let remaining_heating_time = this.pv_forecast.estimateRemainingSurplusToday(this.heating_expected_power);
        let remaining_warmwater_time = this.pv_forecast.estimateRemainingSurplusToday(this.warmwater_expected_power);
        let remaining_time = Math.min(remaining_heating_time, remaining_warmwater_time);

        return (required_runtime + this.surplus_load_grace_period_mins <= remaining_time);
    }

    forceBuffering(min_available_power, max_available_power) {
        if(this.emi_settings.get() == HEATPUMP_EMI_SETTINGS.MAX_BUFFER) {
            if(this.isHeatingAllowedToRun() && max_available_power > this.heating_expected_power) {
                this.semp_client.requestHeating(min_available_power, false);
            }
            if(this.isWarmWaterAllowedToRun() && max_available_power > this.warmwater_expected_power) {
                this.semp_client.requestWarmWater(true, false);
            }
        }
    }

    isWarmWaterAllowedToRun() {  return (this.required_warmwater_runtime >= this.min_heatpump_runtime_mins); }
    isHeatingAllowedToRun() { return (this.required_heating_runtime >= this.min_heatpump_runtime_mins);  }
    isHeatPumpAllowedToRun() { return (this.isWarmWaterAllowedToRun() || this.isHeatingAllowedToRun());  }

    controlStrategyHeatPumpGreedy(min_available_power, max_available_power) {
        if(!this.isHeatPumpAllowedToRun()) {       
            if(this.emi_settings.get() != HEATPUMP_EMI_SETTINGS.OFF && this.emi_settings.readyToChange()) {     
                console.log("Buffers are full, not worth to turn heatpump on anymore (Water: " + this.required_warmwater_runtime + " m needed, Heating: " + this.required_heating_runtime + "m needed.");
                this.emi_settings.apply(HEATPUMP_EMI_SETTINGS.OFF, true);
            }
        } else {
            if(this.emi_settings.get() == HEATPUMP_EMI_SETTINGS.OFF) {
                console.log("Worth again to turn on heatpump (Water: " + this.required_warmwater_runtime + " m needed, Heating: " + this.required_heating_runtime + "m needed.");
                this.emi_settings.apply(HEATPUMP_EMI_SETTINGS.MAX_BUFFER, true);
            }
            this.forceBuffering(min_available_power, max_available_power);
        }
    }

    controlHeatPumpEfficient(min_available_power, max_available_power) {
            this.emi_settings.apply(HEATPUMP_EMI_SETTINGS.EFFICIENT, false);
            let min_power = this.semp_client.getHeatingMinPower();
            if(this.isHeatingAllowedToRun() && min_available_power > min_power) { 
                this.semp_client.requestHeating(min_power, false); // TODO: Power Demand following, increase power when colder
            } else if(max_available_power < min_power) {
                this.semp_client.requestHeating(0, false);
            }
    }

    controlStrategyAfternoonGreedy(min_available_power, max_available_power) {
        if(this.checkStrategyAfteroonGreedyFeasible()) {
            this.controlHeatPumpEfficient(min_available_power, max_available_power);
        } else {
            this.reportStatus();
            this.setStrategy(HEATPUMP_STRATEGY.HEATPUMP_GREEDY);    
            this.emi_settings.apply(HEATPUMP_EMI_SETTINGS.MAX_BUFFER, true);
        }

    }

    controlStrategyExcessOnly() {
        // replace with feasible check
        if(!this.checkStrategyExcessOnlyFeasible()) {
            this.reportStatus();
            this.setStrategy(HEATPUMP_STRATEGY.HEATPUMP_GREEDY);    
            this.emi_settings.apply(HEATPUMP_EMI_SETTINGS.MAX_BUFFER, true);
        }
    }
    
    getTargetEmiSettings(strategy) {
        switch(strategy) {
            case HEATPUMP_STRATEGY.PASSIVE:
                return HEATPUMP_EMI_OFF_SETTINGS;
            case HEATPUMP_STRATEGY.HEATPUMP_ECONOMIC:
                return EFFICIENT_HEATPUMP_EMI_SETTINGS;
            case HEATPUMP_STRATEGY.AFTERNOON_GREEDY:
            case HEATPUMP_STRATEGY.HYBRID:
            case HEATPUMP_STRATEGY.EXCESS_ONLY:                
            case HEATPUMP_STRATEGY.HEATPUMP_GREEDY:
                return MAX_BUFFER_HEATPUMP_EMI_SETTINGS;
            default:
                console.error("Invalid strategy: " + this.strategy);
                return DEFAULT_HEATPUMP_EMI_SETTINGS;
        }
    }

    updateState() {
        this.semp_client.updateState();
        
        let target = this.getTargetEmiSettings(this.strategy);
        this.required_boiler_runtime = this.calculateBoilerRunMinsRequired(target.getWarmWaterTemp());   
        this.required_warmwater_runtime = this.calculateWarmWaterRunMinsRequired(target.getWarmWaterTemp()); 
        this.required_heating_runtime = this.calculateHeatingRunMinsRequired(target.getHeatingBufferTemp());

        this.remaining_boiler_excess_time = this.pv_forecast.estimateRemainingExcessToday(this.boiler.getExpectedPower());
        this.remaining_heating_excess_time = this.pv_forecast.estimateRemainingExcessToday(this.heating_expected_power); 

        this.remaining_heating_surplus_time = this.pv_forecast.estimateRemainingSurplusToday(this.heating_expected_power);
        this.remaining_warmwater_surplus_time = this.pv_forecast.estimateRemainingSurplusToday(this.warmwater_expected_power);

        this.hk2_pump_on = this.getIsgBooleanState(this.hk2_pump_obj);
        setState(this.HK2_PUMP_OBJ, this.hk2_pump_on, true);
        this.hk3_pump_on = this.getIsgBooleanState(this.hk3_pump_obj);
        setState(this.HK3_PUMP_OBJ, this.hk3_pump_on, true);

        this.semp_client.writeState();
    }

    control(interval, min_available_power, max_available_power) {
        this.updateState();
        switch(this.strategy) {
            case HEATPUMP_STRATEGY.PASSIVE:
                break; // Nothing to control when passive.
            case HEATPUMP_STRATEGY.HEATPUMP_ECONOMIC:
            case HEATPUMP_STRATEGY.HYBRID:
                if(this.DEBUG) { console.log("Unsupported strategy: " + this.strategy); }
                break;
            case HEATPUMP_STRATEGY.AFTERNOON_GREEDY:
                this.controlStrategyAfternoonGreedy();
                break;
            case HEATPUMP_STRATEGY.HEATPUMP_GREEDY:
                this.controlStrategyHeatPumpGreedy(min_available_power, max_available_power);
                break;
            case HEATPUMP_STRATEGY.EXCESS_ONLY:
                this.controlStrategyExcessOnly();
                break;
            default:
                console.error("Invalid strategy: " + this.strategy);
        }
    }
}
