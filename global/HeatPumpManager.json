/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/

/*
Strategy: Excess
Mode: Efficient, Buffering (once boiler not feasible anymore)
EMI Setting: MaxBuffer

Strategy: Surplus
Mode: Efficient, Buffering (once required = remaining + 1h OR if excess)
EMI Setting: MaxBuffer

Strategy: Greedy
Mode: Modulated, Buffering (if high surplus)
EMI Setting: MaxBuffer

*/
const HEATPUMP_STRATEGY = Object.freeze({
    PASSIVE : "PASSIVE",  // Nothing to actively manage for the heatpump / boiler. This is the default.
    GREEDY : "GREEDY", // Use surplus as available while staying in an efficient regime.
    SURPLUS : "SURPLUS", // Run economic in the morning, use potential excess over noon and fill buffers with surplus before evening.
    EXCESS : "EXCESS", // Only use excess solar energy (via Boiler load) to make warm water
});

const HEATPUMP_MODE = Object.freeze({
    PASSIVE : "PASSIVE",     // Do not actively start the heatpump
    EFFICIENT : "EFFICIENT",  // Lowest power possible for heatpump to be most efficient.
    MODULATED : "MODULATED", // Modulate heatpump power to follow available solar surplus
    BUFFERING : "BUFFERING", // Try to fill buffers as fast as possible with available surplus energy.
    EFFICIENT_BUFFERING : "EFFICIENT BUFFERING", // Same as Buffering, but keep heatpump lower in an efficient regime
});

class HeatPumpManager {
    constructor(root_obj, pv_forecast, boiler) {
        this.root_obj = root_obj + ".heatpump";
        this.heatpump = new HeatPump(root_obj, boiler);
        this.pv_forecast = pv_forecast;
        this.DEBUG = false;

        this.strategy = HEATPUMP_STRATEGY.PASSIVE;
        this.strategy_chosen = false;
        this.warmwater_mode = HEATPUMP_MODE.PASSIVE;
        this.heating_mode = HEATPUMP_MODE.PASSIVE;
        this.emi_settings = new HeatPumpEmiSettings(HEATPUMP_EMI_SETTINGS.MAX_BUFFER, this.root_obj);

        this.remaining_boiler_excess_time = 0;
        this.remaining_heating_excess_time = 0; 
        this.remaining_warmwater_surplus_time = 0;
        this.remaining_heating_surplus_time = 0;

        this.excess_load_grace_period_mins = 15; // Grace period / tolerance for switching on loads before the excess energy window passes
        this.surplus_load_grace_period_mins = 60; // Grace period / tolerance for switching on loads before the surplus energy window passes
        this.surplus_buffering_latest_start_hours = 16; // The latest time when we want to start surplus buffering before the evening consumption peak starts
        
        this.STRATEGY_OBJ = this.root_obj + ".strategy";
        createState(this.STRATEGY_OBJ, this.strategy, {read: true, write: false, name: "Strategy", type: "string", def: "UNKNOWN"});
        
        this.restoreState();
        this.updateState();
    }

    restoreState() {
        this.strategy = getState(this.STRATEGY_OBJ).val;
        this.strategy_chosen = isToday(getState(this.STRATEGY_OBJ).ts);
        this.emi_settings.apply(HEATPUMP_EMI_SETTINGS.MAX_BUFFER, false);
        console.log("Restored from state: Strategy = " + this.strategy + "");
    }

    resetDayValues() { this.strategy_chosen = false;}
    getCurrentPower() { return this.heatpump.getCurrentPower(); }

    setWarmWaterMode(new_mode, reason) {
        if(new_mode != this.warmwater_mode) {
            this.warmwater_mode = new_mode;
            this.resetWarmWaterTarget();
            let reason_suffix = '.';
            if(reason) { reason_suffix = " because of " + reason + "."; }
            console.log("Changing Heatpump WarmWater mode to " + new_mode + reason_suffix);
        }
        this.updateState();
    }
    getWarmWaterMode() { return this.warmwater_mode; }
    resetWarmWaterTarget() { this.heatpump.setWarmWaterTarget(this.getDefaultTargetSettings(this.warmwater_mode).getWarmWaterTemp()); }


    setHeatingMode(new_mode, reason) {
        if(new_mode != this.heating_mode) {
            this.heating_mode = new_mode;
            this.resetHeatingTarget();
            let reason_suffix = '.';
            if(reason) { reason_suffix = " because of " + reason + "."; }
            if(!this.heatpump.isInSummerMode()) {
                console.log("Changing Heatpump Heating mode to " + new_mode + reason_suffix);
            }
        }
        this.updateState();
    }
    getHeatingMode() { return this.heating_mode; }
    resetHeatingTarget() { this.heatpump.setHeatingTarget(this.getDefaultTargetSettings(this.heating_mode).getHeatingBufferTemp()); }


    chooseStrategyIfNecessary() {
        let now = new Date();
        if(!this.strategy_chosen && now.getHours() >= 7) {
            console.log("Choosing Strategy for today.");
            this.chooseStrategy();
        }
    }
    
    chooseStrategy() {
        this.updateState();
        this.reportStatus();
        if(this.checkExcessBoilerOnlyFeasible()) {
            this.setStrategy(HEATPUMP_STRATEGY.EXCESS);
        } else if(this.checkSurplusOnlyFeasible()) {
            this.setStrategy(HEATPUMP_STRATEGY.SURPLUS);
        } else {
            this.setStrategy(HEATPUMP_STRATEGY.GREEDY);
        }
        this.strategy_chosen = true;
    }

    updateAtSunrise() {
        this.updateState();
        this.chooseStrategy();
        // We need a write of the Strategy object once a day to refresh the state timestamp.
        setState(this.STRATEGY_OBJ, this.strategy, true);
        this.pv_forecast.findPeakTime(); 
    }

    reportStatus()
    {
        let status = "HP STATUS (" + this.strategy + ":" + this.getWarmWaterMode() + "/" + this.getHeatingMode() + ") | ";
        status += "DEMAND: Water = " + this.heatpump.getRequiredWarmWaterRunTimeToMaxBuffer() + "m/" + this.heatpump.getRequiredBoilerRunTimeToMaxBuffer() + "m";
        if(!this.heatpump.isInSummerMode()) { 
            status += ", Heat = " + this.heatpump.getRequiredHeatingRunTimeToMaxBuffer() + "m"; 
        }
        
        if(this.remaining_boiler_excess_time > 0) {
            status += " | EXCESS: Boiler = " + this.remaining_boiler_excess_time + "m";
            if(!this.heatpump.isInSummerMode() && this.remaining_heating_excess_time > 0) {
                status += ", Heat = " + this.remaining_heating_excess_time + "m"; 
            }
        }
        status += " | SURPLUS: Water = " + this.remaining_warmwater_surplus_time + "m";
        if(!this.heatpump.isInSummerMode()) {
            status += ", Heat = " + this.remaining_heating_surplus_time + "m";
        }
        console.log(status);
    }

    updateHourly() {
        this.chooseStrategyIfNecessary();
        this.reportStatus();
        if(this.DEBUG) {console.log("Last hour average power: " + this.pv_forecast.getLastHourAverageMeasuredPower() + "W");}
    }

    setStrategy(new_strategy) {
        if(this.strategy != new_strategy || !this.strategy_chosen) {
            this.strategy = new_strategy;
            setState(this.STRATEGY_OBJ, this.strategy, true);
            console.log("Set strategy to " + this.strategy + ".");
        }
    }

    checkExcessBoilerOnlyFeasible() {
        // Assume that the heating by heatpump (with low power) will anyway still fit after the boiler heating.
        let boiler_feasible = this.heatpump.getRequiredBoilerRunTimeToMaxBuffer() + this.excess_load_grace_period_mins <= this.remaining_boiler_excess_time;
        let heating_feasible = this.heatpump.getRequiredHeatingRunTimeToMaxBuffer() + this.excess_load_grace_period_mins <= this.remaining_heating_excess_time;
        return boiler_feasible && (this.heatpump.isInSummerMode() || heating_feasible);
    }

    doStartExcessHeatPumpBufferingNow() { return isAfternoon() && !this.checkExcessHeatPumpFeasible(); }
    checkExcessHeatPumpFeasible() {
        // Assume that the heating by heatpump (with low power) will anyway still fit after the boiler heating.
        let warmwater_feasible = this.heatpump.getRequiredWarmWaterRunTimeToMaxBuffer() + this.excess_load_grace_period_mins <= this.remaining_warmwater_excess_time;
        let heating_feasible = this.heatpump.getRequiredHeatingRunTimeToMaxBuffer() + this.excess_load_grace_period_mins <= this.remaining_heating_excess_time;
        return warmwater_feasible && (this.heatpump.isInSummerMode() || heating_feasible);
    }
    
    isWarmWaterBufferingComplete() {
        return this.heatpump.hasReachedMaxBufferWarmWaterTemp() || 
                this.pv_forecast.estimateRemainingSurplusToday(0) == 0;
    }

    doStartSurplusBufferingNow() {   
        let now = new Date();
        return isAfternoon() && (!this.checkSurplusOnlyFeasible() || now.getHours() >= this.surplus_buffering_latest_start_hours);  
    }
    checkSurplusOnlyFeasible() {
        let required_runtime = this.heatpump.getRequiredWarmWaterRunTimeToMaxBuffer();
        if(!this.heatpump.isInSummerMode()) {
            required_runtime += this.heatpump.getRequiredHeatingRunTimeToMaxBuffer();
        }
        let remaining_time = this.heatpump.isInSummerMode() ? 
            this.remaining_warmwater_surplus_time : Math.min(this.remaining_heating_surplus_time, this.remaining_warmwater_surplus_time);
        return (required_runtime + this.surplus_load_grace_period_mins <= remaining_time);
    }

    calculateWarmWaterEveningBoost() {
        // Decrease the "cost" of warmwater buffering in the evening to encourage
        // buffering with only partial surplus
        const MAX_GRIDPOWER_FRACTION = 0.75;  // We want at least 25% surplus for buffering
        let max_boost_watts = this.heatpump.getExpectedWarmWaterPower() * MAX_GRIDPOWER_FRACTION; 

        let peak_time = this.pv_forecast.getPeakTime(); 
        let time_since_peak_secs = (Date.now() - peak_time)/1000;
        let pv_power_remaining_secs = this.pv_forecast.estimateRemainingSurplusToday(0)*60;
        if(time_since_peak_secs > 0) {
            let pv_time_after_peak = time_since_peak_secs + pv_power_remaining_secs;
            let time_after_peak_fraction = time_since_peak_secs / pv_time_after_peak;
            return time_after_peak_fraction * max_boost_watts;
        } else {
            return 0;
        }
    }

    controlStrategyGreedyWarmWater(surplus, excess) {
        let evening_boost = this.calculateWarmWaterEveningBoost();
        let min_surplus_power = surplus.tail(60).percentile(20) - evening_boost; 
        let max_surplus_power = Math.max(surplus.percentile(75), min_surplus_power) - evening_boost;

        if(this.isWarmWaterBufferingComplete()) {
            this.setWarmWaterMode(HEATPUMP_MODE.PASSIVE, "warmwater buffering complete");
        } else if(this.doStartOpportunisticWarmWaterBuffering(min_surplus_power) || 
           this.canContinueWarmWaterBuffering(max_surplus_power)) {
            // Opportunistic Buffering if there is surplus. To avoid unnecessary heatpump starts,
            // do not stop once there is no more excess but instead eat into surplus.
            this.setWarmWaterMode(HEATPUMP_MODE.BUFFERING, "opportunistic Surplus Buffering");
            this.heatpump.controlWarmWater(min_surplus_power, max_surplus_power);
        } else if(this.doStartLowTempWarmWaterBuffering()) {
            this.setWarmWaterMode(HEATPUMP_MODE.BUFFERING, "low Temperature Buffering");
            this.heatpump.controlWarmWater(min_surplus_power, max_surplus_power);
        } else {
            this.setWarmWaterMode(HEATPUMP_MODE.PASSIVE, "no surplus power available");
        }
    }

    upcomingSurplusForecasted() {
        const EXPECTED_POWER_RESERVE_MULTIPLIER = 1.5;
        let now = new Date();
        let upcoming_forecast = this.pv_forecast.getLoadCorrectedForecast(addMinutes(now, 30));
        return upcoming_forecast > this.heatpump.getExpectedHeatingPower() * EXPECTED_POWER_RESERVE_MULTIPLIER;
    }
    controlHeating(surplus, excess) {
        let min_surplus_power = surplus.tail(60).percentile(20); 
        let max_surplus_power = Math.max(surplus.percentile(75), min_surplus_power);
        let min_excess_power = excess.tail(60).percentile(30);
        let max_excess_power = Math.max(excess.tail(60).percentile(90), min_excess_power);        

        if(this.heatpump.isInSummerMode()) {
            this.setHeatingMode(HEATPUMP_MODE.PASSIVE, "in summer mode.");
        } else if(this.doStartSurplusBufferingNow()) { 
            this.setHeatingMode(HEATPUMP_MODE.BUFFERING, "it is time to start buffering surplus now");
            this.heatpump.controlMaxBufferingHeating(min_surplus_power, max_surplus_power);
        } else if(this.doStartOpportunisticHeatingBuffering(min_excess_power) || 
           this.canContinueHeatingBuffering(max_surplus_power)) {
            // Opportunistic Buffering if there is excess. 
            this.setHeatingMode(HEATPUMP_MODE.BUFFERING, "opportunistic Excess Buffering");
            this.heatpump.controlModulatedHeating(min_excess_power, max_excess_power);            
        } else if(this.upcomingSurplusForecasted()) {
            this.setHeatingMode(HEATPUMP_MODE.EFFICIENT, "expected surplus.");
            this.heatpump.controlEfficientHeating(min_surplus_power, max_surplus_power);
        } else {
            this.setHeatingMode(HEATPUMP_MODE.MODULATED, "greedy heating.");
            this.heatpump.controlModulatedHeating(min_surplus_power, max_surplus_power);
        }
    }

    doStartOpportunisticHeatingBuffering(min_power) { return min_power > this.heatpump.getExpectedHeatingPower(); }
    canContinueHeatingBuffering(max_power) {
        let is_on = this.heatpump.isOn(); 
        let is_buffering = this.getHeatingMode() == HEATPUMP_MODE.BUFFERING;
        let can_continue = max_power > this.heatpump.getMinHeatingPower();
        return is_on && is_buffering && can_continue;
    }

    doStartOpportunisticWarmWaterBuffering(min_power) { return min_power > this.heatpump.getExpectedWarmWaterPower() && !this.isWarmWaterBufferingComplete(); }
    canContinueWarmWaterBuffering(max_power) {
        let is_on = this.heatpump.isWarmWaterOn();
        let can_continue = max_power >= this.heatpump.getExpectedWarmWaterPower();
        return is_on && can_continue;
    }
    mayContinueWarmWaterBuffering(max_power) {
        // In order to minimize the number of compressor starts in summer, keep the heatpump
        // filling the warm water buffer while have surplus power.
        return this.heatpump.isWarmWaterOn() &&
            this.heatpump.isInSummerMode(); // TODO: Also keep running if heating does not want/need to run in winter.
    }
    doStartLowTempWarmWaterBuffering() {
        const WW_HYSTERESIS_FUDGE = 1.5;
        let low_temp_threshold = this.heatpump.getWarmWaterEcoTemp() - this.heatpump.getWarmWaterHysteresis() + WW_HYSTERESIS_FUDGE;
        return this.heatpump.getWarmWaterTemp() <= low_temp_threshold;
    }

    controlStrategySurplusWarmWater(surplus, excess) {   
        let min_surplus_power = Math.min(surplus.percentile(20), surplus.tail(60).percentile(20));
        let max_surplus_power = Math.max(surplus.tail(2*60).percentile(80), min_surplus_power);
        let min_excess_power = excess.tail(60).percentile(30);
        let max_excess_power = Math.max(excess.tail(60).percentile(90), min_excess_power);
        
        if(this.isWarmWaterBufferingComplete()) {
            this.setWarmWaterMode(HEATPUMP_MODE.PASSIVE, "warmwater buffering complete");
        } else if(this.doStartOpportunisticWarmWaterBuffering(min_excess_power) || 
           this.canContinueWarmWaterBuffering(max_excess_power)) {
            // Opportunistic Buffering if there is excess. To avoid unnecessary heatpump starts,
            // do not stop once there is no more excess but instead eat into surplus.
            this.setWarmWaterMode(HEATPUMP_MODE.BUFFERING, "opportunistic Excess Buffering");
            this.heatpump.controlWarmWater(min_excess_power, max_surplus_power);
        } else if(this.doStartLowTempWarmWaterBuffering()) {
            this.setWarmWaterMode(HEATPUMP_MODE.BUFFERING, "low Temperature Buffering");
            this.heatpump.controlWarmWater(min_surplus_power, max_surplus_power);
        } else if(this.mayContinueWarmWaterBuffering(max_surplus_power)) {
            // Keep heatpump running if already started
            this.setWarmWaterMode(HEATPUMP_MODE.BUFFERING, "WarmWater already running");
            this.heatpump.controlWarmWater(min_surplus_power, max_surplus_power);
        } else if(this.checkSurplusOnlyFeasible()) {
            this.setWarmWaterMode(HEATPUMP_MODE.PASSIVE, "waiting for time to start surplus buffering");
        } else if(this.doStartSurplusBufferingNow()) {
            this.setWarmWaterMode(HEATPUMP_MODE.BUFFERING, "it is time to start buffering surplus now");
            this.heatpump.controlWarmWater(min_surplus_power, max_surplus_power);
        } else {
            console.log("Strategy SURPLUS not feasible anymore - changing.");
            this.chooseStrategy();
        }
    }

    controlStrategyExcessWarmWater(surplus, excess) {
        let min_excess_power = Math.min(excess.tail(5*60).percentile(50), excess.tail(60).percentile(25));
        let max_excess_power = Math.max(excess.tail(2*60).percentile(90), min_excess_power);
        let min_surplus_power = Math.min(surplus.percentile(20), surplus.tail(60).percentile(20));
        let max_surplus_power = Math.max(surplus.tail(2*60).percentile(80), min_surplus_power);
        if(this.isWarmWaterBufferingComplete()) {
            this.setWarmWaterMode(HEATPUMP_MODE.PASSIVE, "warmwater buffering complete");
        } else if(this.mayContinueWarmWaterBuffering(max_surplus_power)) {
            // To avoid unnecessary heatpump starts, do not stop  and once there is no more excess 
            // eat into surplus. Never start the heatpump
            this.setWarmWaterMode(HEATPUMP_MODE.BUFFERING, "WarmWater already running");
            this.heatpump.controlWarmWater(min_excess_power, max_surplus_power);
        } else if(this.doStartLowTempWarmWaterBuffering()) {
            this.setWarmWaterMode(HEATPUMP_MODE.BUFFERING, "low Temperature Buffering");
            this.heatpump.controlWarmWater(min_surplus_power, max_surplus_power);
        } else if(this.checkExcessBoilerOnlyFeasible()) {
            // Try to get by with only using the electric boiler for warmwater
            // while keeping heating efficient
            this.setWarmWaterMode(HEATPUMP_MODE.PASSIVE, "attempting to warm water with Boiler only");
        } else if(this.doStartExcessHeatPumpBufferingNow()) {
            this.setWarmWaterMode(HEATPUMP_MODE.BUFFERING, "attempting to buffer with remaining excess power");
            this.heatpump.controlWarmWater(min_excess_power, max_excess_power);
        } else {
            console.log("Strategy EXCESS not feasible anymore - changing.");
            this.chooseStrategy();
        }
    }

    updateState() {
        this.heatpump.updateState();
        
        let target_ww_temp = MAX_BUFFER_HEATPUMP_EMI_SETTINGS.getWarmWaterTemp();
        let target_heating_temp = MAX_BUFFER_HEATPUMP_EMI_SETTINGS.getHeatingBufferTemp();

        this.remaining_boiler_excess_time = this.pv_forecast.estimateRemainingExcessToday(this.heatpump.getExpectedBoilerPower());
        this.remaining_warmwater_excess_time = this.pv_forecast.estimateRemainingExcessToday(this.heatpump.estimateExpectedWarmWaterPowerAtTemp(target_ww_temp));
        this.remaining_heating_excess_time = this.pv_forecast.estimateRemainingExcessToday(this.heatpump.estimateExpectedHeatingPower(target_heating_temp)); 
        this.remaining_heating_surplus_time = this.pv_forecast.estimateRemainingSurplusToday(this.heatpump.estimateExpectedHeatingPower(target_heating_temp));
        this.remaining_warmwater_surplus_time = this.pv_forecast.estimateRemainingSurplusToday(this.heatpump.estimateExpectedWarmWaterPowerAtTemp(target_ww_temp));
    }
    
    control(surplus, excess) {
        this.updateState();
        switch(this.strategy) {
            case HEATPUMP_STRATEGY.PASSIVE:
                break; // Nothing to control when passive.
            case HEATPUMP_STRATEGY.SURPLUS:
                this.controlStrategySurplusWarmWater(surplus, excess);
                break;
            case HEATPUMP_STRATEGY.GREEDY:
                this.controlStrategyGreedyWarmWater(surplus, excess);
                break;
            case HEATPUMP_STRATEGY.EXCESS:
                this.controlStrategyExcessWarmWater(surplus, excess);
                break;
            default:
                console.error("Invalid strategy: " + this.strategy);
                this.chooseStrategy();
        }
        this.controlHeating(surplus, excess);
    }

    getDefaultTargetSettings(mode) {
        switch(mode) {
            case HEATPUMP_MODE.PASSIVE:            
            case HEATPUMP_MODE.EFFICIENT:
                return EFFICIENT_HEATPUMP_EMI_SETTINGS;
            case HEATPUMP_MODE.EFFICIENT_BUFFERING:
                return DEFAULT_HEATPUMP_EMI_SETTINGS;
            case HEATPUMP_MODE.BUFFERING:
            case HEATPUMP_MODE.MODULATED:
                return MAX_BUFFER_HEATPUMP_EMI_SETTINGS;
            default:
                console.error("Unsupported HEATPUMP MODE: " + mode);
                return DEFAULT_HEATPUMP_EMI_SETTINGS;
        }
    }

}
