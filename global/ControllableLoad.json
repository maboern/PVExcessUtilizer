/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
const CONTROLLABLE_LOAD_TYPE = Object.freeze({
    BATTERY : "BATTERY",
    HEATER : "HEATER",
    BOILER : "BOILER"
});

class ControllableLoad {
    constructor(script_id, name, load_type) {
        this.name = name;
        this.script_id = script_id;
        this.SCRIPT_DEBUG = false;
        this.load_type = load_type;
        this.expected_power = 0;
        this.load_hysteresis_power_on = 250;
        this.load_hysteresis_power_off = 500;
        this.startup_time_secs = 60;
        this.min_runtime_secs = 2*60;

        this.is_ready = true;
        this.day_runtime_secs = 0;
        this.last_started_at = 0;
        this.runtime_secs = 0;
        this.max_day_runtime_secs = 12*60*60;
        this.day_energy = 0;
        this.non_load_consumption_buf = new RingBuffer(60);
        this.self_shutoff_at = 0;
        this.min_break_after_self_shutoff_secs = 45*60; 
        this.reason_for_stopping = "";

        this.is_connected_obj = null;
        this.switch_obj = null;
        this.measured_power_obj = null;
        
        this.root_obj = this.script_id + '.load.' + this.name;
        this.total_switch_count_obj = this.root_obj + '.switchCount';
        createState(this.total_switch_count_obj, 0, {read: true, write: false, name: "Total Switch Count", type: "number", unit: "", def: 0});
        this.day_runtime_secs_obj = this.root_obj + '.runtimeSecs';
        createState(this.day_runtime_secs_obj, 0, {read: true, write: false, name: "Load Day Runtime", type: "number", unit: "s", def: 0});
        this.total_energy_obj = this.root_obj + '.totalEnergy';
        createState(this.total_energy_obj, 0, {read: true, write: false, name: "Load Total Energy", type: "number", unit: "Wh", def: 0});
        this.day_energy_obj = this.root_obj + '.dayEnergy';
        createState(this.day_energy_obj, 0, {read: true, write: false, name: "Load Day Energy", type: "number", unit: "Wh", def: 0});

        this.max_day_runtime_mins_obj = this.root_obj + '.maxDayRuntimeMins';
        createState(this.max_day_runtime_mins_obj, 12*60, {read: true, write: true, name: "Max Daily Runtime", type: "number", unit: "min", def: 12*60});

        this.restoreState();
    }

    restoreState() {
        this.day_runtime_secs = getState(this.day_runtime_secs_obj).val;
        this.day_energy = getState(this.day_energy_obj).val;
        this.max_day_runtime_secs = getState(this.max_day_runtime_mins_obj).val*60;
    }

    isOn() { return this.isReady() && getState(this.switch_obj).val; }
    toString() { return `Load ${this.name} (${this.load_type})`; }
    isReady() { 
        let was_ready = this.is_ready;
        this.is_ready = getStateIfExisting(this.is_connected_obj, false); 
        if(was_ready && !this.is_ready) { 
            console.log(this.toString() + " became NOT READY!"); 
        } else if(this.is_ready && !was_ready) { 
            console.log(this.toString() + " became READY.");
        }
        return this.is_ready;
    }

    updateEnergyConsumption(interval) {
        var interval_energy_Wh = interval * this.getCurrentPower() / 3600;
        
        this.day_energy += interval_energy_Wh;
        setState(this.day_energy_obj, this.day_energy, true);
        
        var total_energy = getState(this.total_energy_obj).val;
        total_energy += interval_energy_Wh;
        setState(this.total_energy_obj, total_energy, true);
    }

    updateRunTime(interval) {
        this.day_runtime_secs += interval;
        setState(this.day_runtime_secs_obj, this.day_runtime_secs, true);

        this.runtime_secs += interval;
        this.updateEnergyConsumption(interval);
    }

    resetDayValues() { 
        this.day_energy = 0;
        setState(this.day_energy_obj, this.day_energy, true);
        this.day_runtime_secs = 0;
        setState(this.day_runtime_secs_obj, this.day_runtime_secs, true);
        this.self_shutoff_at = 0;
        this.runtime_secs = 0;
    }

    start(available_power) {
        if(this.allowedToRun()) {
            console.log("Turning ON Load " + this.name + ". (Available Power: " + available_power + "W)");
            setState(this.switch_obj, true);

            var switchCount = getState(this.total_switch_count_obj).val;
            switchCount = switchCount + 1;
            setState(this.total_switch_count_obj, switchCount, true);
            this.last_started_at = Date.now();
            this.runtime_secs = 0;
            return true;
        } else {
            console.log("Cannot turn on Load + " + this.name + ": Not allowed to run.");
            return false;
        }
    }

    stop() {
        var reason = "";
        if(this.reason_for_stopping) {
            reason = "(" + this.reason_for_stopping + ")";
        }
        console.log("Turning OFF Load " + this.name + ". " + reason);
        setState(this.switch_obj, false);
        this.runtime_secs = 0;
    }

    hasStartedUp() {
        return (this.isRunningForSecs() > this.startup_time_secs);
    }

    hasRunForMinimumTime() {
        return (this.isRunningForSecs() >= this.min_runtime_secs);
    }
    
    getExpectedPower() {
        return this.expected_power;
    }

    getMeasuredPower() {
        return getStateIfExisting(this.measured_power_obj, this.expected_power);
    }

    getCurrentPower() {
        if(this.isReady()) {
            if(this.measured_power_obj) {
                return this.getMeasuredPower();
            } else if(this.isOn()) {
                return this.expected_power;
            }
        } 
        return 0;
    }

    allowedToRunAgainAfterSelfShutoff() {
        return (this.self_shutoff_at == 0 || ((Date.now() - this.self_shutoff_at) > this.min_break_after_self_shutoff_secs * 1000));
    } 

    allowedToRun() {
        if(this.isReady()) {
            if(this.day_runtime_secs < this.max_day_runtime_secs) {
                if(this.allowedToRunAgainAfterSelfShutoff()) {
                    this.reason_for_stopping = "";
                    return true;
                } else {
                    this.reason_for_stopping = "SELF SHUT-OFF";
                }
            } else {
                this.reason_for_stopping = "MAX DAY RUNTIME";
            }
        } else {
            this.reason_for_stopping = "NOT READY";
        }
        return false;
    }
    
    allowedToStop() {
        return (!this.isOn() || this.hasRunForMinimumTime());
    }
    
    isRunningForSecs() {
        if(this.isOn()) {
            return this.runtime_secs;
        }
        return 0;
    }
    
    validateDrawingPower(non_load_consumption) {
        // Check whether the device is plausibly still drawing
        // the expected power or has turned itself off
        if(this.measured_power_obj && this.getMeasuredPower() > 0) {
            return true;
        } else if(this.non_load_consumption_buf.percentile(20) >= 0) {
            // The non-load consumption already has subtracted the expected consumption of
            // unmeasured loads. So only if we have a deficit here, we expect that 
            // we may not be running
            return true;
        } else if(!this.hasStartedUp()) {
            return true;
        } else {
            return false;
        }
    }

    validateRunning(non_load_consumption) {
        if(this.isOn()) {
            this.non_load_consumption_buf.push(non_load_consumption);
            if(!this.allowedToRun()) {
                console.log("Load " + this.name + " is not allowed to run anymore. Stopping.");
                this.stop();
                return false;
            } else if(this.hasStartedUp() && !this.validateDrawingPower(non_load_consumption)) {
                console.log("Load " + this.name + " is drawing too little to be running (Non-load: " + non_load_consumption + "W / " + this.expected_power + "W).");
                this.self_shutoff_at = Date.now();
                this.reason_for_stopping = "NOT DRAWING POWER";
                this.stop();
                return false;
            } else {
                return true;
            }
        } else {
            this.non_load_consumption_buf.clear();
            return false;
        }
    }

    checkMaxRuntimeUpdated() {
        let old_runtime = this.max_day_runtime_secs;
        this.max_day_runtime_secs = getState(this.max_day_runtime_mins_obj).val*60;
        if(this.max_day_runtime_secs != old_runtime) {
            console.log("Load " + this.name + ": Updated max daily runtime to " + this.max_day_runtime_secs/60 + "mins.");
        }
        setState(this.max_day_runtime_mins_obj, this.max_day_runtime_secs/60, true);
    }

    control(interval, min_available_power, max_available_power) {
        this.checkMaxRuntimeUpdated();
        if(!this.isReady()) {
            return false;
        }

        if(this.isOn()) {
            if(this.hasRunForMinimumTime()) {
                if(max_available_power < this.getCurrentPower() - this.load_hysteresis_power_off){
                    this.reason_for_stopping = "LOW AVAILABLE POWER: " + max_available_power + "W";
                    this.stop();
                }
            }
            this.updateRunTime(interval);
        } else {
            if(min_available_power > this.expected_power + this.load_hysteresis_power_on) {
                if(this.allowedToRun()) {
                    this.start(min_available_power);
                }
            }
        }
        return true;
    }
}

        