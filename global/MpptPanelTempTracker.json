/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
// Tracks PV Panel cell temperature approximated with the
// Linear Temperature Rise with Power (NOCT model)
class MpptPanelTempTracker {
    constructor(parent_root_obj) {
        this.SCRIPT_DEBUG = false;
        this.TEST = true;

        this.NOMINAL_MODULE_OPERATING_TEMPERATURE = 42.3; // Cell Temp at 800W/m2 at 20°C ambient with 1m/s wind speed
        this.NOMINAL_MODULE_AMBIENT_TEMPERATURE = 20;
        this.NOMINAL_MODULE_OPERATING_TEMPERATURE_OFFSET = this.NOMINAL_MODULE_OPERATING_TEMPERATURE - this.NOMINAL_MODULE_AMBIENT_TEMPERATURE;
        this.NOMINAL_MODULE_IRRADIANCE = 800;
        this.UNSHADED_AMBIENT_TEMPERATURE_BOOST_BY_IRRADIANCE = 3 / 1000; // 3°C at max irradiance (1000W/m2)
        this.AMBIENT_TEMPERATURE_DYNAMICS = 0.0005;
        this.HEATING_TEMPERATURE_DYNAMICS = 0.01;
        this.COOLING_TEMPERATURE_DYNAMICS = 0.002;
        this.PANEL_VOLTAGE_TEMPERATURE_COEFFICIENT = -0.004; // Delta_U = -0.27% / °C. Too low in practice => round up

        this.panel_temperature = 25; 
        this.ambient_temperature = 20; 
        this.ambient_temperature_sensor_obj = 'stiebel-isg.0.info.ANLAGE.HEIZUNG.AUSSENTEMPERATUR';

        this.root_obj = parent_root_obj + '.temp';
        this.TEMPERATURE_ESTIMATE_OBJ = this.root_obj + ".module_temperature";
        createState(this.TEMPERATURE_ESTIMATE_OBJ, 0, {read: true, write: false, name: "PV Module Temperature Estimate", type: "number", unit: "°C", def: 0});

        this.restoreState();
    }
    restoreState() {
        this.ambient_temperature = getStateIfExistingWithMaxAge(this.ambient_temperature_sensor_obj, 3*60*60, this.ambient_temperature);
        var panel_temp = getStateIfExistingWithMaxAge(this.TEMPERATURE_ESTIMATE_OBJ, 10*60, -9999);
        if(panel_temp != -9999) {
            this.panel_temperature = panel_temp;
            console.log("Updating panel temperature from state: " + Math.round(this.panel_temperature) + "°C @ ambient: " + this.ambient_temperature + "°C.");
        } else {
            console.warn("Coud not restore panel temperature from state!");
        }
    }

    getPanelTemperature() { return this.panel_temperature; }
    process(irradiance) {
        // Calculate the temperature after the cell reaches thermal equilibrium with the current irradiance
        let normalized_irradiance = irradiance / this.NOMINAL_MODULE_IRRADIANCE;
        let ambient_temperature = getStateIfExistingWithMaxAge(this.ambient_temperature_sensor_obj, 3*60*60, this.ambient_temperature);
        let ambient_equilibrium_temperature = ambient_temperature + irradiance * this.UNSHADED_AMBIENT_TEMPERATURE_BOOST_BY_IRRADIANCE;
        let ambient_temperature_diff = ambient_equilibrium_temperature - this.ambient_temperature;
        this.ambient_temperature += ambient_temperature_diff * this.AMBIENT_TEMPERATURE_DYNAMICS;
        
        let equilibrium_panel_temperature = this.ambient_temperature + (normalized_irradiance * this.NOMINAL_MODULE_OPERATING_TEMPERATURE_OFFSET);

        if(this.SCRIPT_DEBUG) {
            console.info("Normalized irradiance: " + normalized_irradiance + ", Equilibrium Temp: " + equilibrium_panel_temperature + ".");
        }

        // Adjust the current cell temperature towards thermal equilibrium with Exponential Moving Average
        let temperature_diff = equilibrium_panel_temperature - this.panel_temperature;
        let temperature_dynamics = 0;
        if(temperature_diff > 0) {
            // Apply a higher temperature coefficient when heating up compared to cooling down
            temperature_dynamics = this.HEATING_TEMPERATURE_DYNAMICS;
        } else {
            temperature_dynamics = this.COOLING_TEMPERATURE_DYNAMICS;
        }
        this.panel_temperature += temperature_diff * temperature_dynamics;
    }
    
    correctVoltage(reference_voltage, reference_temperature) {
        // Predict the voltage drop due to heating in "clouds with gaps" situations
        // On 2025-03-23 (Temp: ~14°, clouded power ~6kW, gap power: ~20kW) observed:
        // -1.6V/15 Minutes => -0.00178V/s
        // -0.69V/5.5Minutes => -0.002V/s
        var temp_diff = this.panel_temperature - reference_temperature;
        var temperature_correction_percent = temp_diff * this.PANEL_VOLTAGE_TEMPERATURE_COEFFICIENT;
        var temperature_corrected_voltage = reference_voltage * (1 + temperature_correction_percent);
        return temperature_corrected_voltage;
    }

    writeState() {
        setState(this.TEMPERATURE_ESTIMATE_OBJ, this.panel_temperature, true);
    }
}