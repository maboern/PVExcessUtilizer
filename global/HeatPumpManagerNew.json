/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/

/*
Strategy: Excess
Mode: Efficient, Buffering (once boiler not feasible anymore)
EMI Setting: MaxBuffer

Strategy: Surplus
Mode: Efficient, Buffering (once required = remaining + 1h OR if excess)
EMI Setting: MaxBuffer

Strategy: Greedy
Mode: Modulated, Buffering (if high surplus)
EMI Setting: MaxBuffer

*/
const HEATPUMP_STRATEGY = Object.freeze({
    PASSIVE : "PASSIVE",  // Nothing to actively manage for the heatpump / boiler. This is the default.
    GREEDY : "GREEDY", // Use surplus as available while staying in an efficient regime.
    SURPLUS : "SURPLUS", // Run economic in the morning, use potential excess over noon and fill buffers with surplus before evening.
    EXCESS : "EXCESS", // Only use excess solar energy (via Boiler load) to make warm water
});

class HeatPumpManager{
    constructor(root_obj, pv_forecast, heatpump) {
        this.root_obj = root_obj + ".heatpump";
        this.heatpump = heatpump;
        this.pv_forecast = pv_forecast;
        this.DEBUG = false;

        this.strategy = HEATPUMP_STRATEGY.PASSIVE;
        this.strategy_chosen = false;
        this.emi_settings = new HeatPumpEmiSettings(HEATPUMP_EMI_SETTINGS.DEFAULT, this.root_obj);

        this.remaining_boiler_excess_time = 0;
        this.remaining_heating_excess_time = 0; 
        this.remaining_warmwater_surplus_time = 0;
        this.remaining_heating_surplus_time = 0;

        this.excess_load_grace_period_mins = 15; // Grace period / tolerance for switching on loads before the excess / surplus energy window passes
        this.surplus_load_grace_period_mins = 60; // Grace period / tolerance for switching on loads before the excess / surplus energy window passes
        
        this.STRATEGY_OBJ = this.root_obj + ".strategy";
        createState(this.STRATEGY_OBJ, this.strategy, {read: true, write: false, name: "Strategy", type: "string", def: "UNKNOWN"});
        
        this.restoreState();
        this.updateState();
        this.reportStatus();
    }

    restoreState() {
        this.strategy = getState(this.STRATEGY_OBJ).val;
        this.strategy_chosen = isToday(getState(this.STRATEGY_OBJ).ts);
        this.emi_settings.restoreState();
        this.emi_settings.apply(HEATPUMP_EMI_SETTINGS.MAX_BUFFER, false);
        console.log("Restored from state: Strategy = " + this.strategy + "");
    }

    resetDayValues() {
        this.strategy_chosen = false;
    }

    chooseStrategyIfNecessary() {
        let now = new Date();
        if(!this.strategy_chosen && now.getHours() >= 7) {
            console.log("Choosing Strategy for today.");
            this.chooseStrategy();
        }
    }
    
    chooseStrategy() {
        this.updateState();
        if(this.checkExcessOnlyFeasible()) {
            this.setStrategy(HEATPUMP_STRATEGY.EXCESS);
        } else if(this.checkSurplusOnlyFeasible()) {
            this.setStrategy(HEATPUMP_STRATEGY.SURPLUS);
        } else {
            this.setStrategy(HEATPUMP_STRATEGY.GREEDY);
        }
        this.strategy_chosen = true;
    }

    updateAtSunrise() {
        this.updateState();
        this.chooseStrategy();
    }

    reportStatus()
    {
        let status = "STATUS (" + this.strategy + ") | ";
        status += "DEMAND: Water = " + this.heatpump.getRequiredWarmWaterRunTime() + "m/" + this.heatpump.getRequiredBoilerRunTime() + "m";
        if(!this.heatpump.isInSummerMode()) { 
            status += ", Heat = " + this.heatpump.getRequiredHeatingRunTime() + "m"; 
        }
        
        if(this.strategy == HEATPUMP_STRATEGY.EXCESS) {
            status += " | EXCESS: Boiler = " + this.remaining_boiler_excess_time + "m";
            if(!this.heatpump.isInSummerMode()) {
                status += ", Heat = " + this.remaining_heating_excess_time + "m"; 
            }
        } else {
            status += " | SURPLUS: Water = " + this.remaining_warmwater_surplus_time + "m";
            if(!this.heatpump.isInSummerMode()) {
                status += ", Heat = " + this.remaining_heating_surplus_time + "m";
            }
        }
        console.log(status);
    }

    updateHourly() {
        this.chooseStrategyIfNecessary();
        this.reportStatus();
        if(this.DEBUG) {console.log("Last hour average power: " + this.pv_forecast.getLastHourAverageMeasuredPower() + "W");}
    }

    setStrategy(new_strategy) {
        if(this.strategy != new_strategy) {
            this.strategy = new_strategy;
            setState(this.STRATEGY_OBJ, this.strategy, true);
            console.log("Set strategy to " + this.strategy + ".");
        }
    }

    checkExcessOnlyFeasible() {
        // Assume that the heating by heatpump (with low power) will anyway still fit after the boiler heating.
        let boiler_feasible = this.heatpump.getRequiredBoilerRunTime() + this.excess_load_grace_period_mins <= this.remaining_boiler_excess_time;
        let heating_feasible = this.heatpump.getRequiredHeatingRunTime() + this.excess_load_grace_period_mins <= this.remaining_heating_excess_time;
        return boiler_feasible && heating_feasible;
    }

    checkSurplusBufferNow() {   return !this.checkExcessOnlyFeasible();  }
    checkSurplusOnlyFeasible() {
        let required_runtime = this.heatpump.getRequiredHeatingRunTime() + this.heatpump.getRequiredWarmWaterRunTime();
        let remaining_time = Math.min(this.remaining_heating_surplus_time, this.remaining_warmwater_surplus_time);
        return (required_runtime + this.surplus_load_grace_period_mins <= remaining_time);
    }

    controlStrategyGreedy(min_available_power, max_available_power) {
        this.heatpump.setMode(HEATPUMP_MODE.MODULATED);
    }

    controlStrategySurplus() {    
        if(isAfternoon() && this.checkSurplusBufferNow()) {
            this.heatpump.setMode(HEATPUMP_MODE.BUFFERING);
        } else {
            this.heatpump.setMode(HEATPUMP_MODE.EFFICIENT);
        }
    }

    controlStrategyExcess() {
        if(this.checkExcessOnlyFeasible()) {
            this.heatpump.setMode(HEATPUMP_MODE.EFFICIENT);
        } else if(isAfternoon()) {
            this.heatpump.setMode(HEATPUMP_MODE.BUFFERING);
        }
    }

    updateState() {
        this.heatpump.updateState();
        
        this.remaining_boiler_excess_time = this.pv_forecast.estimateRemainingExcessToday(this.heatpump.getExpectedBoilerPower());
        this.remaining_heating_excess_time = this.pv_forecast.estimateRemainingExcessToday(this.heatpump.getExpectedHeatingPower()); 
        this.remaining_heating_surplus_time = this.pv_forecast.estimateRemainingSurplusToday(this.heatpump.getExpectedHeatingPower());
        this.remaining_warmwater_surplus_time = this.pv_forecast.estimateRemainingSurplusToday(this.heatpump.getExpectedWarmWaterPower());
    }
    
    control(interval, min_available_power, max_available_power) {
        this.updateState();
        switch(this.strategy) {
            case HEATPUMP_STRATEGY.PASSIVE:
                break; // Nothing to control when passive.
            case HEATPUMP_STRATEGY.SURPLUS:
                this.controlStrategySurplus();
                break;
            case HEATPUMP_STRATEGY.GREEDY:
                this.controlStrategyGreedy();
                break;
            case HEATPUMP_STRATEGY.EXCESS:
                this.controlStrategyExcess();
                break;
            default:
                console.error("Invalid strategy: " + this.strategy);
        }
        this.heatpump.control(min_available_power, min_available_power, max_available_power);
    }
}
