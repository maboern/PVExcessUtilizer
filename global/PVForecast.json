/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
class PVForecast {
    constructor(root_obj, feedin_limit_power, default_load_power) {
        this.root_obj = root_obj + '.forecast';
        this.DEBUG = false;

        this.update_interval_ms = 5*60*1000;
        this.base_power_reserve = 700; // ~700W background power
        this.ondemand_power_reserve = 2000; // 1 major device as on-demand power
        this.ondemand_power_on_ratio = 0.5; // active 50% of the time
        this.feedin_limit_power = feedin_limit_power;
        this.default_load_power = default_load_power;
        this.excess_power_threshold = this.feedin_limit_power + this.base_power_reserve; 
        this.surplus_power_threshold = this.base_power_reserve; 

        this.url = "";
        this.api_data = "";
        this.api_data_ts = 0;
        this.api_request_timeout = 30000;
        this.forecast = new Map();

        this.cur_forecast = undefined;
        this.peak_time = undefined; 

        // Primary lookback buffer for per-second measurements until next update interval
        this.power_measurement_lookback = new RingBuffer(this.update_interval_ms/1000); 
        // Second aggregation of update interval average buckets to 1 hour
        this.power_measurement_bucket_loockback = new RingBuffer(60*60*1000/this.update_interval_ms);

        this.FORECAST_CUR_WATTS_OBJ = this.root_obj + ".power_now";
        createState(this.FORECAST_CUR_WATTS_OBJ, 0, {read: true, write: false, name: "pvForecastCurrentPower", type: "number", unit: "W", def: 0});
        this.FORECAST_CUR_MIN_WATTS_OBJ = this.root_obj + ".min_power_now";
        createState(this.FORECAST_CUR_MIN_WATTS_OBJ, 0, {read: true, write: false, name: "pvForecastCurrentMinPower", type: "number", unit: "W", def: 0});
        this.FORECAST_CUR_MAX_WATTS_OBJ = this.root_obj + ".max_power_now";
        createState(this.FORECAST_CUR_MAX_WATTS_OBJ, 0, {read: true, write: false, name: "pvForecastCurrentMaxPower", type: "number", unit: "W", def: 0});
        this.FORECAST_SOLCAST_API_KEY = this.root_obj + ".api_key";
        createState(this.FORECAST_SOLCAST_API_KEY, "", {read: true, write: true, name: "Solcast API Key", type: "string", def: ""});
        this.FORECAST_SOLCAST_SITE_ID = this.root_obj + ".site_id";
        createState(this.FORECAST_SOLCAST_SITE_ID, "", {read: true, write: true, name: "Solcast Site ID ", type: "string", def: ""});
        this.FORECAST_SOLCAST_DATA = this.root_obj + ".api_data";
        createState(this.FORECAST_SOLCAST_DATA, "", {read: true, write: false, name: "Latest Forecast raw data", type: "string", def: ""});
        
        this.restoreState();

        console.log("Initialized PVForecast.");
    }

    restoreState() {
        let api_key = getState(this.FORECAST_SOLCAST_API_KEY).val;
        let site_id = getState(this.FORECAST_SOLCAST_SITE_ID).val;
        this.url = `https://api.solcast.com.au/rooftop_sites/${site_id}/forecasts?api_key=${api_key}&format=json`;
        setState(this.FORECAST_SOLCAST_API_KEY, api_key, true);
        setState(this.FORECAST_SOLCAST_SITE_ID, site_id, true);
        
        this.api_data = getState(this.FORECAST_SOLCAST_DATA).val;
        this.api_data_ts = getState(this.FORECAST_SOLCAST_DATA).ts;

        this.restoreFromHistory();
        this.parseApiData(this.api_data);
    }

    getUpdateIntervalMs() { return this.update_interval_ms; }

    estimateRemainingExcessToday(expected_load_power) {
        return this.estimateRemainingToday(expected_load_power, this.excess_power_threshold, this.ondemand_power_reserve);
    }

    estimateRemainingSurplusToday(expected_load_power) {
        return this.estimateRemainingToday(expected_load_power, this.surplus_power_threshold, this.ondemand_power_reserve);
    }

    estimateRemainingToday(expected_load_power, base_power_threshold, ondemand_power_reserve) {
        var datetime = new Date();

        const STEP_SIZE_MINUTES = 5;
        var total_extra_energy = 0;
        var total_extra_minutes = 0;
        while(datetime.getHours() <= 21) {
            var slot_power = this.getForecast(datetime);
            var extra_power_max = slot_power - base_power_threshold;
            var extra_power_min = slot_power - base_power_threshold - ondemand_power_reserve;
            if(extra_power_min >= expected_load_power) {
                total_extra_energy += extra_power_min * (STEP_SIZE_MINUTES/60); // Energy in Wh
                total_extra_minutes += STEP_SIZE_MINUTES;
            } else if(extra_power_max >= expected_load_power) {
                total_extra_energy += extra_power_max * (STEP_SIZE_MINUTES/60) * this.ondemand_power_on_ratio; // Energy in Wh
                total_extra_minutes += STEP_SIZE_MINUTES * this.ondemand_power_on_ratio;
            }
            datetime = addMinutes(datetime, STEP_SIZE_MINUTES);
        }

        if(this.DEBUG) { console.log("Forecasting " + Math.round(total_extra_energy/1000) + "kWh above " + (base_power_threshold + ondemand_power_reserve)/1000 + "kW for a " + expected_load_power/1000 + "kW load across " + total_extra_minutes + " minutes remaining today."); }
        return total_extra_minutes;
    }

    getPeakTime() { if(this.peak_time === undefined) {this.findPeakTime();} return this.peak_time; }
    getPeakPower(peak_time) { return this.getForecast(peak_time); }
    findPeakTime() {
        var datetime = new Date();
        
        const STEP_SIZE_MINUTES = 5;
        let peak_time = datetime;
        let peak_power = 0;
        while(datetime.getHours() <= 21) {
            let slot_power = this.getForecast(datetime);
            if(slot_power > peak_power) {
                peak_time = datetime;
                peak_power = slot_power;
            }
            datetime = addMinutes(datetime, STEP_SIZE_MINUTES);
        }
        this.peak_time = peak_time;

        console.log("Forecasting " + Math.round(peak_power) + "W peak at " + peak_time.toTimeString() + "today.");
        return peak_time;
    }

    getLoadCorrectedForecast(datetime) {
        return this.getForecast(datetime) - this.base_power_reserve - this.ondemand_power_on_ratio*this.ondemand_power_reserve;
    }

    getForecast(datetime) { return this.getForecastRange(datetime).getEstimate(); }
    getForecastRange(datetime) {
        let hour = datetime.getHours();
        if(hour < 5 || hour >= 21) {
            // No solar power outside of forecast hours
            return new PVForecastRange(datetime.getTime(), 0, 0, 0);
        }

        // Assuming half-hour periods at 15 or 45 minutes offset
        let prev_period_timestamp = roundMinutesDownToHalfHoursAtQuarterOffset(datetime).getTime();
        let prev_forecast_value = this.forecast.get(prev_period_timestamp);
        let next_forecast_value = this.forecast.get(prev_period_timestamp + 30*60*1000);

        if(prev_forecast_value === undefined || next_forecast_value === undefined) {
            console.warn("Undefined forecast for time " + datetime + " (" + prev_period_timestamp + ")! " + prev_forecast_value + "/" + next_forecast_value);
            return new PVForecastRange(datetime.getTime(), -1, -1, -1);
        }

        // Linear Interpolation between prev and next sample
        return PVForecastRange.interpolate(prev_forecast_value, next_forecast_value, datetime.getTime());
    }

    now() {
        if(this.cur_forecast === undefined) { this.cur_forecast = this.getForecastRange(new Date()); }
        return this.cur_forecast;
    }

    updateMeasurement(pv_power_estimate) {
        this.power_measurement_lookback.push(pv_power_estimate);
    }

    aggregateMeasurements() {
        let interval_power_avg = this.power_measurement_lookback.avg();
        this.power_measurement_bucket_loockback.push(interval_power_avg);
    }

    getLastHourAverageMeasuredPower() { 
        return this.power_measurement_bucket_loockback.avg();
    }

    parseApiData(json) {
        let data = JSON.parse(json);
        let forecasts = data.forecasts;

        for(var i=0; i<forecasts.length; i++) {
            let forecast = forecasts[i];

            if(forecast.period != "PT30M") {console.warn("Forecast Period does not match expected PT30M: " + forecast);}
            let timestamp = Date.parse(forecast.period_end) - 15*60*1000; // 15 Minutes offset to get to middle of period
            let estimate = Number(forecast.pv_estimate)*1000;
            let lower = Number(forecast.pv_estimate10)*1000;
            let upper = Number(forecast.pv_estimate90)*1000;

            let forecast_range = new PVForecastRange(timestamp, estimate, lower, upper);
            this.forecast.set(timestamp, forecast_range);
        }

        this.historize();
    }

    retrieve() {
        httpGet(this.url, { timeout: this.api_request_timeout, responseType: 'text' },
            (error, response) => {
                const data = response.data;
                const code = response.statusCode;
                if (!error) {
                    if(this.DEBUG) {  log("Response (" + code + "): " + data); }
                    setState(this.FORECAST_SOLCAST_DATA, data, true);
                    this.api_data = data;
                    this.api_data_ts = Date.now();
                    this.parseApiData(data);
                    console.log("PVForecast: Updated Forecast Data from Solcast API.");
                } else {
                    var msg = "(" + error + ") ERROR for HTTP GET Request to: " + this.url + "(" + code + ")";
                    log(msg, "warn");
                }
            }
        );
    }

    process() {
        this.aggregateMeasurements();

        let now = new Date();
        this.cur_forecast = this.getForecastRange(now);
    }

    historize() {
        this.forecast.forEach((value) => sendTo('influxdb.0', 'storeState', {
            id: this.FORECAST_CUR_WATTS_OBJ,
            state: {
                ts: value.getTimestamp(),
                val: value.getEstimate(),
                ack: true,
                from: this.root_obj
            }
        }));
        this.forecast.forEach((value) => sendTo('influxdb.0', 'storeState', {
            id: this.FORECAST_CUR_MIN_WATTS_OBJ,
            state: {
                ts: value.getTimestamp(),
                val: value.getLower(),
                ack: true,
                from: this.root_obj
            }
        }));
        this.forecast.forEach((value) => sendTo('influxdb.0', 'storeState', {
            id: this.FORECAST_CUR_MAX_WATTS_OBJ,
            state: {
                ts: value.getTimestamp(),
                val: value.getUpper(),
                ack: true,
                from: this.root_obj
            }
        }));
    }

    getOrCreateForecastRange(timestamp) {
        if(!this.forecast.has(timestamp)) {
            let forecast = new PVForecastRange(timestamp, 0, 0, 0);
            this.forecast.set(timestamp, forecast);
        }
        return this.forecast.get(timestamp);
    }
    restoreFromHistory() {
        var startOfDay = new Date();  
        startOfDay.setHours(0); startOfDay.setMinutes(0); startOfDay.setSeconds(0); startOfDay.setMilliseconds(0);

        sendTo('influxdb.0', 'getHistory', { 
            id: this.FORECAST_CUR_WATTS_OBJ,
            options: {
                start:      startOfDay.getTime(),
                end:        startOfDay.getTime() + 24*60*60*1000, // end of day
                aggregate: 'onchange'
            }
        }, result => {
            for (var i = 0; i < result.result.length; i++) {
                this.getOrCreateForecastRange(result.result[i].ts).setEstimate(result.result[i].val);
            }
        });

        sendTo('influxdb.0', 'getHistory', { 
            id: this.FORECAST_CUR_MIN_WATTS_OBJ,
            options: {
                start:      startOfDay.getTime(),
                end:        startOfDay.getTime() + 24*60*60*1000, // end of day
                aggregate: 'onchange'
            }
        }, result => {
            for (var i = 0; i < result.result.length; i++) {
                this.getOrCreateForecastRange(result.result[i].ts).setLower(result.result[i].val);
            }
        });

        sendTo('influxdb.0', 'getHistory', { 
            id: this.FORECAST_CUR_MAX_WATTS_OBJ,
            options: {
                start:      startOfDay.getTime(),
                end:        startOfDay.getTime() + 24*60*60*1000, // end of day
                aggregate: 'onchange'
            }
        }, result => {
            for (var i = 0; i < result.result.length; i++) {
                this.getOrCreateForecastRange(result.result[i].ts).setUpper(result.result[i].val);
            }
        });
    }
}

/*
https://api.solcast.com.au/rooftop_sites/e0bb-b70a-a8ac-d2f7/forecasts?format=json
=> 
{
  "forecasts": [
    {
      "pv_estimate": 6.4192,
      "pv_estimate10": 4.5637,
      "pv_estimate90": 6.74016,
      "period_end": "2025-05-22T16:00:00.0000000Z",
      "period": "PT30M"
    },
    {
      "pv_estimate": 4.2924,
      "pv_estimate10": 1.9654,
      "pv_estimate90": 4.50702,
      "period_end": "2025-05-22T16:30:00.0000000Z",
      "period": "PT30M"
    },
    ....
    ....
    {
      "pv_estimate": 4.8604,
      "pv_estimate10": 2.4711,
      "pv_estimate90": 5.10342,
      "period_end": "2025-05-24T16:00:00.0000000Z",
      "period": "PT30M"
    }
  ]
}
*/

