/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
class PVForecast {
    constructor(root_obj, feedin_limit_power, default_load_power) {
        this.root_obj = root_obj + '.forecast';
        this.DEBUG = false;

        this.update_interval_ms = 5*60*1000;
        this.base_power_reserve = 2000 + 600; // ~600W background power + 1 major device as tolerance
        this.feedin_limit_power = feedin_limit_power;
        this.default_load_power = default_load_power;
        this.excess_power_threshold = this.feedin_limit_power + this.base_power_reserve; 

        // 30% reduction of forecast at 17:00, starting from 10:00
        this.dampening = 0.30; 
        this.dampening_peak_hour = 17;
        this.dampening_start_hour = 10;
        this.dampening_slope = this.dampening / (this.dampening_peak_hour - this.dampening_start_hour);

        this.cur_forecast = this.getForecast(new Date());
        this.day_excess_minutes_remaining = 0;

        // PV Forecast from API (Solcast / Forecast.solar)
        this.PV_FORECAST_BASE = 'pvforecast.1.summary';
        this.PV_FORECAST_POWER_NOW_OBJ = this.PV_FORECAST_BASE + '.power.now';
        this.PV_FORECAST_TODAY_HOURS_BASE_OBJ = this.PV_FORECAST_BASE + '.power.hoursToday';

        this.FORECAST_CUR_WATTS_OBJ = this.root_obj + ".power_now";
        createState(this.FORECAST_CUR_WATTS_OBJ, 0, {read: true, write: false, name: "pvForecastCurrentPower", type: "number", unit: "W", def: 0});

        console.debug("Initialized PVForecast.");
    }

    getUpdateIntervalMs() { return this.update_interval_ms; }

    estimateRemainingExcessToday(controllable_load_power) {
        var datetime = new Date();
        
        const STEP_SIZE_MINUTES = 5;
        var total_excess_energy = 0;
        var total_excess_minutes = 0;
        while(datetime.getHours() <= 21) {
            var slot_power = this.getForecast(datetime);
            var excess_power = slot_power - this.excess_power_threshold;
            if(excess_power >= controllable_load_power) {
                total_excess_energy += excess_power * (STEP_SIZE_MINUTES/60); // Energy in Wh
                total_excess_minutes += STEP_SIZE_MINUTES;
            }
            datetime = addMinutes(datetime, STEP_SIZE_MINUTES);
        }

        console.log("Forecasting " + Math.round(total_excess_energy/1000) + "kWh of excess for a " + controllable_load_power/1000 + "kW load across " + total_excess_minutes + " minutes remaining today.");
        return total_excess_minutes;
    }

    loadSampleTimeForecast(sample_time) {
        var obj = this.PV_FORECAST_TODAY_HOURS_BASE_OBJ + "." + sample_time;
        return getState(obj).val;
    }

    toSampleTime(hour, half_hour) {
        let padded_hour = ('0' + hour).slice(-2);
        let padded_half_hours = ('0' + half_hour).slice(-2);
        return padded_hour + ":" + padded_half_hours + ":00";
    }

    applyForecastDampening(forecast, hour, minute) {
        let fractional_hour = hour + (minute / 60);

        var corrected_forecast = forecast;
        if(fractional_hour > this.dampening_start_hour) {
            let peak_distance = Math.abs(this.dampening_peak_hour - fractional_hour);
            let dampening = this.dampening - (peak_distance * this.dampening_slope);
            corrected_forecast = forecast * (1 - dampening);
        }

        return corrected_forecast;
    }

    getForecast(datetime) {
        let hour = datetime.getHours();
        let minute = datetime.getMinutes();
        if(hour < 5 || hour >= 21) {
            // No solar power outside of forecast hours
            return 0;
        }

        // Assuming half-hour values
        let prev_hour = hour;
        let prev_half_hours = Math.floor(minute / 30) * 30;

        let next_hour = hour;
        let next_half_hours = Math.ceil(minute / 30) * 30;
        if(next_half_hours == 60) {
            next_hour = next_hour + 1;
            next_half_hours = 0;
        }
        
        let prev_sample_time = this.toSampleTime(prev_hour, prev_half_hours);
        let prev_forecast = this.loadSampleTimeForecast(prev_sample_time);
        let next_sample_time = this.toSampleTime(next_hour, next_half_hours);
        let next_forecast = this.loadSampleTimeForecast(next_sample_time);

        // Linear Interpolation between prev and next sample
        let fraction = (minute % 30) / 30;
        let interpolated_forecast = prev_forecast * (1-fraction) + next_forecast * fraction;

        return this.applyForecastDampening(interpolated_forecast, hour, minute);
    }

    now() {
        return this.cur_forecast;
    }

    process() {
        let now = new Date();
        this.cur_forecast = this.getForecast(now);

        this.day_excess_minutes_remaining = this.estimateRemainingExcessToday(this.default_load_power);

        this.writeState();
    }

    writeState() {
        setState(this.FORECAST_CUR_WATTS_OBJ, this.cur_forecast, true);
    }
}