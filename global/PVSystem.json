/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
const PV_POWER_ESTIMATION_MODE = Object.freeze({
    MPPT : "MPPT",
    MAX : "MAX"
});

class PVSystem {
    constructor(script_id, name, pv_forecast) {
        this.name = name;
        this.root_obj = script_id;
        this.pv_forecast = pv_forecast;
        this.SCRIPT_DEBUG = false;
        this.updateIntervalMs = 1000;

        // Sunny TriPower X-15 15kW Inverter
        this.INV15_MAX_POWER_WATTS = 15000;
        this.INV15_NR_PV_PANELS = 35;
        this.INV15_NR_PV_PANELS_B = 18;
        this.INV15_VOLTAGE_B_OBJ = 'modbus.0.inputRegisters.60960_Measurement_DcMs_Vol_B'/*DC Spannung Eingang B*/
        this.INV15_MODBUS_ID = 'modbus.0';
        this.INV15_CONNECTED_OBJ = this.INV15_MODBUS_ID + '.info.connection';
        this.INV15_CUR_POWER_WATTS_OBJ = this.INV15_MODBUS_ID + '.inputRegisters.60776_Measurement_GridMs_TotW'
        this.inv15_power = 0;

        // Sunny TriPower SmartEnergy 10kW Hybrid Inverter
        this.INV10_MAX_POWER_WATTS = 10000;
        this.INV10_NR_PV_PANELS = 25;
        this.INV10_MODBUS_ID = 'modbus.1';
        this.INV10_CONNECTED_OBJ = this.INV10_MODBUS_ID + '.info.connection';
        this.INV10_CUR_POWER_WATTS_OBJ = this.INV10_MODBUS_ID + '.inputRegisters.60776_Measurement_GridMs_TotW';
        this.inv10_power = 0;

        // Static PV System Parameters
        this.PV_PEAK_POWER_WATTS = 26400;
        this.PV_GRID_FEEDIN_MAX_WATTS = 13200;
        this.PV_TOTAL_NR_PV_PANELS = this.INV15_NR_PV_PANELS + this.INV10_NR_PV_PANELS;
        this.PV_PANEL_POWER_WATTS = 440;
        this.PV_MANAGER_CONNECTED = 'sma-em.0.info.connection';
        this.PV_GRID_FEEDIN_OBJ = 'sma-em.0.3014001810.psurplus';
        this.PV_GRID_CONSUMPTION_OBJ = 'sma-em.0.3014001810.pregard';

        // Configuration
        this.PV_GRID_FEEDIN_TOLERANCE = 250;
        this.PV_MAX_DYNAMICS = 0.2;
        this.PV_MEASUREMENT_DYNAMICS = 0.01;
        this.PV_MEASUREMENT_LOOKBACK_SECS = 60;
        this.PV_AVAILABLE_POWER_LOOKBACK_SECS = 10*60;

        this.estimation_mode = PV_POWER_ESTIMATION_MODE.MAX;
        this.mppt = new MpptCurtailmentEstimator(this.root_obj, this.INV15_VOLTAGE_B_OBJ, this.INV15_NR_PV_PANELS_B);
        
        this.pv_power = 0;
        this.pv_power_buffer = new RingBuffer(this.PV_MEASUREMENT_LOOKBACK_SECS);
        this.pv_power_max = 0;
        this.pv_power_estimate = 0;
        this.pv_power_estimate_buffer = new RingBuffer(this.PV_MEASUREMENT_LOOKBACK_SECS);
        this.pv_max_power_estimate = 0;
        this.feedin_power = 0;
        this.pv_feedin_limit_deviation = 0;
        this.pv_feedin_power_buffer = new RingBuffer(this.PV_MEASUREMENT_LOOKBACK_SECS);
        this.self_consumption = 0;
        this.self_consumption_smoothed = 0;
        this.self_consumption_buffer = new RingBuffer(this.PV_MEASUREMENT_LOOKBACK_SECS);
        this.grid_consumption = 0;
        this.grid_consumption_buffer = new RingBuffer(this.PV_MEASUREMENT_LOOKBACK_SECS);
        this.total_consumption = 0;
        this.total_consumption_buffer = new RingBuffer(this.PV_MEASUREMENT_LOOKBACK_SECS);
        this.pv_unused_potential_power = 0;
        this.pv_unused_potential_power_buffer = new RingBuffer(this.PV_MEASUREMENT_LOOKBACK_SECS);
        this.pv_excess_power = 0;
        this.pv_excess_power_buffer = new RingBuffer(this.PV_MEASUREMENT_LOOKBACK_SECS);
        this.controllable_load_power = 0;
        this.available_excess_power_buffer = new RingBuffer(this.PV_AVAILABLE_POWER_LOOKBACK_SECS);
        this.available_surplus_power_buffer = new RingBuffer(this.PV_AVAILABLE_POWER_LOOKBACK_SECS);
        this.utilized_excess_power = 0;
        this.utilized_surplus_power = 0;
        this.pv_shading_loss = 0;
        this.pv_shading_loss_buffer = new RingBuffer(this.PV_AVAILABLE_POWER_LOOKBACK_SECS);
        this.irradiance = 0;

        this.PV_CUR_WATTS_OBJ = this.root_obj + ".pv_cur_watts";
        createState(this.PV_CUR_WATTS_OBJ, 0, {read: true, write: false, name: "pvProductionCurrentPower", type: "number", unit: "W", def: 0});
        this.PV_FEEDIN_WATTS_OBJ = this.root_obj + ".pv_feedin_watts";
        createState(this.PV_FEEDIN_WATTS_OBJ, 0, {read: true, write: false, name: "pvFeedInPower", type: "number", unit: "W", def: 0});
        this.PV_FEEDIN_LIMIT_DEVIATION_WATTS_OBJ = this.root_obj + ".pv_feedin_limit_deviation_watts";
        createState(this.PV_FEEDIN_LIMIT_DEVIATION_WATTS_OBJ, 0, {read: true, write: false, name: "pvFeedInLimitDeviation", type: "number", unit: "W", def: 0});
        this.PV_SHADING_LOSS_WATTS_OBJ = this.root_obj + ".pv_shading_loss_watts";
        createState(this.PV_SHADING_LOSS_WATTS_OBJ, 0, {read: true, write: false, name: "pvShadingLossPower", type: "number", unit: "W", def: 0});
        this.PV_UNUSED_EXCESS_WATTS_OBJ = this.root_obj + ".pv_unused_excess_watts";
        createState(this.PV_UNUSED_EXCESS_WATTS_OBJ, 0, {read: true, write: false, name: "pvProductionUnusedExcessPower", type: "number", unit: "W", def: 0});
        this.PV_SELF_CONSUMPTION_WATTS_OBJ = this.root_obj + ".pv_self_consumption_watts";
        createState(this.PV_SELF_CONSUMPTION_WATTS_OBJ, 0, {read: true, write: false, name: "pvSelfConsumptionPower", type: "number", unit: "W", def: 0});
        this.PV_TOTAL_CONSUMPTION_WATTS_OBJ = this.root_obj + ".pv_total_consumption_watts";
        createState(this.PV_TOTAL_CONSUMPTION_WATTS_OBJ, 0, {read: true, write: false, name: "pvTotalConsumptionPower", type: "number", unit: "W", def: 0});
        this.PV_ESTIMATE_WATTS_OBJ = this.root_obj + ".pv_generation_estimate_watts";
        createState(this.PV_ESTIMATE_WATTS_OBJ, 0, {read: true, write: false, name: "pvGenerationEstimatePower", type: "number", unit: "W", def: 0});
        this.PV_ESTIMATE_MAX_WATTS_OBJ = this.root_obj + ".pv_generation_max_estimate_watts";
        createState(this.PV_ESTIMATE_MAX_WATTS_OBJ, 0, {read: true, write: false, name: "pvGenerationEstimateMaxPower", type: "number", unit: "W", def: 0});
        this.PV_ESTIMATION_MODE_OBJ = this.root_obj + ".pv_estimation_mode";
        createState(this.PV_ESTIMATION_MODE_OBJ, "MAX", {read: true, write: false, name: "pvPowerEstimationMode", type: "string", def: "MAX"});
        this.PV_IS_CURTAILED_OBJ = this.root_obj + ".pv_is_curtailed";
        createState(this.PV_IS_CURTAILED_OBJ, false, {read: true, write: false, name: "pvIsCurtailed", type: "boolean", def: false});
        this.PV_IRRADIANCE_ESTIMATE_OBJ = this.root_obj + ".irradiance";
        createState(this.PV_IRRADIANCE_ESTIMATE_OBJ, 0, {read: true, write: false, name: "Irradiance Estimate", type: "number", unit: "W/m2", def: 0});
        this.PV_AVAILABLE_EXCESS_WATTS_OBJ = this.root_obj + ".pv_available_excess_watts";
        createState(this.PV_AVAILABLE_EXCESS_WATTS_OBJ, 0, {read: true, write: false, name: "pvAvailableExcessPower", type: "number", unit: "W", def: 0});
        this.PV_AVAILABLE_SURPLUS_WATTS_OBJ = this.root_obj + ".pv_available_surplus_watts";
        createState(this.PV_AVAILABLE_SURPLUS_WATTS_OBJ, 0, {read: true, write: false, name: "pvAvailableSurplusPower", type: "number", unit: "W", def: 0});

        this.PV_DAY_PV_ENERGY_OBJ = this.root_obj + ".stats.day_pv_energy";
        createState(this.PV_DAY_PV_ENERGY_OBJ, 0, {read: true, write: false, name: "Produced PV Energy Day", type: "number", unit: "Wh", def: 0});
        this.PV_DAY_PV_POTENTIAL_ENERGY_OBJ = this.root_obj + ".stats.day_pv_potential_energy";
        createState(this.PV_DAY_PV_POTENTIAL_ENERGY_OBJ, 0, {read: true, write: false, name: "Potential PV Energy Day", type: "number", unit: "Wh", def: 0});
        this.PV_DAY_FEEDIN_ENERGY_OBJ = this.root_obj + ".stats.day_feedin_energy";
        createState(this.PV_DAY_FEEDIN_ENERGY_OBJ, 0, {read: true, write: false, name: "Feedin Energy Day", type: "number", unit: "Wh", def: 0});
        this.PV_DAY_SHADINGLOSS_ENERGY_OBJ = this.root_obj + ".stats.day_shadingloss_energy";
        createState(this.PV_DAY_SHADINGLOSS_ENERGY_OBJ, 0, {read: true, write: false, name: "Shading Loss Day", type: "number", unit: "Wh", def: 0});
        this.PV_DAY_SELFCONSUMPTION_ENERGY_OBJ = this.root_obj + ".stats.day_selfconsumption_energy";
        createState(this.PV_DAY_SELFCONSUMPTION_ENERGY_OBJ, 0, {read: true, write: false, name: "Self-Consumption Energy Day", type: "number", unit: "Wh", def: 0});
        this.PV_DAY_GRIDCONSUMPTION_ENERGY_OBJ = this.root_obj + ".stats.day_gridconsumption_energy";
        createState(this.PV_DAY_GRIDCONSUMPTION_ENERGY_OBJ, 0, {read: true, write: false, name: "Grid Consumption Energy Day", type: "number", unit: "Wh", def: 0});
        this.PV_DAY_TOTALCONSUMPTION_ENERGY_OBJ = this.root_obj + ".stats.day_totalconsumption_energy";
        createState(this.PV_DAY_TOTALCONSUMPTION_ENERGY_OBJ, 0, {read: true, write: false, name: "Total Consumption Energy Day", type: "number", unit: "Wh", def: 0});
        this.PV_DAY_EXCESS_ENERGY_OBJ = this.root_obj + ".stats.day_excess_energy";
        createState(this.PV_DAY_EXCESS_ENERGY_OBJ, 0, {read: true, write: false, name: "Excess Energy Day", type: "number", unit: "Wh", def: 0});
        this.PV_DAY_CONTROLLABLE_LOAD_ENERGY_OBJ = this.root_obj + ".stats.day_controllable_load_energy";
        createState(this.PV_DAY_CONTROLLABLE_LOAD_ENERGY_OBJ, 0, {read: true, write: false, name: "Controllable Load Energy Day", type: "number", unit: "Wh", def: 0});
        this.PV_DAY_UTIL_EXCESS_ENERGY_OBJ = this.root_obj + ".stats.day_utilized_excess_energy";
        createState(this.PV_DAY_UTIL_EXCESS_ENERGY_OBJ, 0, {read: true, write: false, name: "Utilized Excess Energy Day", type: "number", unit: "Wh", def: 0});
        this.PV_DAY_UTIL_SURPLUS_ENERGY_OBJ = this.root_obj + ".stats.day_utilized_surplus_energy";
        createState(this.PV_DAY_UTIL_SURPLUS_ENERGY_OBJ, 0, {read: true, write: false, name: "Utilized Surplus Energy Day", type: "number", unit: "Wh", def: 0});
        this.PV_DAY_UTIL_GRID_ENERGY_OBJ = this.root_obj + ".stats.day_utilized_grid_energy";
        createState(this.PV_DAY_UTIL_GRID_ENERGY_OBJ, 0, {read: true, write: false, name: "Utilized Grid Energy Day", type: "number", unit: "Wh", def: 0});
        
        console.log(`Initialized PV System ${this.name} (${this.PV_PEAK_POWER_WATTS} Wp).`)
    }
    
    getUpdateIntervalMs() { return this.updateIntervalMs; }
    setControllableLoadPower(controllable_load_power) { this.controllable_load_power = controllable_load_power; }
    getControllableLoadPower() { return this.controllable_load_power; }
    getSelfConsumption() { return this.self_consumption; }
    getSelfConsumptionSmoothed() { return this.self_consumption_smoothed; }
    getRecentSelfConsumptionMeasurements() { return this.self_consumption_buffer; }

    getTotalConsumption() { return this.total_consumption; }
    getRecentTotalConsumptionMeasurements() { return this.total_consumption_buffer; }
    getGridConsumption() { return this.grid_consumption; }
    
    getExcessPower() { return this.pv_excess_power; }
    getMaxExcessPower() { return this.pv_excess_power_buffer.max(); }
    getMinExcessPower() { return this.pv_excess_power_buffer.min(); }
    getRecentExcessPowerMeasurements() { return this.pv_excess_power_buffer; }

    getMaxFeedinPower() { return this.pv_feedin_power_buffer.max(); }
    getMinFeedinPower() { return this.pv_feedin_power_buffer.min(); }
    getRecentFeedinPowerMeasurements() { return this.pv_feedin_power_buffer; }

    getRecentAvailableExcessPowerMeasurements() { return this.available_excess_power_buffer; }
    getRecentAvailableSurplusPowerMeasurements() { return this.available_surplus_power_buffer; }

    checkReady() {
        if(getState(this.INV10_CONNECTED_OBJ).val 
        && getState(this.INV15_CONNECTED_OBJ).val
        && getState(this.PV_MANAGER_CONNECTED).val) {
            return true;
        } else {
            return false;
        }
    }

    updateShadingLossEstimate() {
        const PV_POWER_MEASUREMENT_TOLERANCE = 0.001; // 0.1% peak power measurement tolerance
        const SHADING_LOSS_TOLERANCE = PV_POWER_MEASUREMENT_TOLERANCE * (this.INV10_MAX_POWER_WATTS + this.INV15_MAX_POWER_WATTS);
        /* The 15kW Inverter should produce more than the 10kW inverter proportional to the number
        of PV Panels on the string. */
        var inv15_potential_pv_production = this.inv10_power * this.INV15_NR_PV_PANELS / this.INV10_NR_PV_PANELS;
        var unshaded_pv_production = this.inv10_power + inv15_potential_pv_production;

        if(unshaded_pv_production > this.pv_power + SHADING_LOSS_TOLERANCE) {
            this.pv_shading_loss = unshaded_pv_production - this.pv_power;
        } else {
            this.pv_shading_loss = 0;
        }
        this.pv_shading_loss_buffer.push(this.pv_shading_loss);
    }

    restartMeasurementPeriod() {
        this.pv_power_max = this.pv_power;
    }

    fadeGenerationMax() {
        if(this.pv_power_max > this.pv_power_estimate || this.pv_power_max > this.pv_power_fading_max) {
            this.pv_power_fading_max = this.pv_power_max;
        } else {
            this.pv_power_fading_max = smooth(this.pv_power_fading_max, this.pv_power_max, this.PV_MAX_DYNAMICS);
        }
        return this.pv_power_fading_max;
    }

    isCurtailedFeedInValue(feedin_power) {
        if(feedin_power > this.PV_GRID_FEEDIN_MAX_WATTS - this.PV_GRID_FEEDIN_TOLERANCE) {
            return true;
        } else {
            return false;
        }
    }

    isCurtailed() {
        const CURTAILMENT_LOOKBACK_SECS = 15;
        let curtailment_lookback_buf = this.pv_feedin_power_buffer.tail(CURTAILMENT_LOOKBACK_SECS);
        return this.isCurtailedFeedInValue(curtailment_lookback_buf.max()); 
    }

    updateIrradianceEstimate() {
        const POWER_TEMPERATURE_COEFFICIENT = -0.0034; // -0.34% / °C
        const NOMINAL_MODULE_AMBIENT_TEMPERATURE = 20;
        const NOMINAL_MODULE_IRRADIANCE = 800;
        var power_factor = 1 + (POWER_TEMPERATURE_COEFFICIENT * (this.mppt.getPanelTemperature() - NOMINAL_MODULE_AMBIENT_TEMPERATURE)); 
        const NOMINAL_POWER = 332 * 60; // 60 Panels x 332W at Nominal Conditions
        
        let power_estimate = this.pv_power_estimate;
        if(this.isCurtailed()) {
            // If we are in curtailment, our estimate is based on MPPT Panel Tracking, which in turn
            // is dependent on panel temperature influenced by irradiance. So we can get "stuck" in a
            // certain steady state while the actually irradiance is rising. Combat this by giving the
            // forecast some influence here via max power estimate. This also guarantees it to be higher
            // than the current power estimate.
            let diff_to_estimated_max_power = this.pv_max_power_estimate - power_estimate;
            power_estimate += diff_to_estimated_max_power * this.mppt.getUncurtailedVoltageStaleness();
        }

        this.irradiance = (power_estimate * NOMINAL_MODULE_IRRADIANCE) / (NOMINAL_POWER * power_factor);
    }

    updateMaxPotentialPowerEstimate() {
        this.updateShadingLossEstimate();
        this.fadeGenerationMax();

        var forecast = this.pv_forecast.now().getUpper();
        forecast -= this.pv_shading_loss;
        this.pv_max_power_estimate = forecast;
        if(this.isCurtailed()) {
            // We are being curtailed
            if(this.pv_power_max > this.pv_max_power_estimate) {
                // We have observed higher PV power in this period - so we know we can at least produce that
                this.pv_max_power_estimate = this.pv_power_max;
            }
            if(this.pv_power_fading_max > this.pv_max_power_estimate) {
                // We have observed higher PV power earlier, but faded by time since then. 
                // We trust it more than the current forecast or max if it is higher.
                this.pv_max_power_estimate = this.pv_power_fading_max;
            }
            if(this.mppt.getPower() > this.pv_max_power_estimate) {
                // If still the MPPT tracking yields a higher estimate, use that
                // for the maximum estimation even if unreliable.
                this.pv_max_power_estimate = this.mppt.getPower();
            }
        } else {
            // Generation not curtailed because feed-in limit not reached
            this.pv_max_power_estimate = this.pv_power;
        }
        return this.pv_max_power_estimate;
    }

    setEstimationMode(new_mode) {
        var old_mode = this.estimation_mode;
        if(new_mode != old_mode) {
            console.log("Changing estimation mode from " + old_mode + " to " + new_mode +".");
            this.estimation_mode = new_mode;
            setState(this.PV_ESTIMATION_MODE_OBJ, this.estimation_mode, true);
        }
    }
    
    estimatePotentialPower() 
    {
        this.mppt.updateEstimation(this.isCurtailed(), this.pv_power);
        this.updateMaxPotentialPowerEstimate();
        
        if(this.mppt.isReliable()) {
            this.setEstimationMode(PV_POWER_ESTIMATION_MODE.MPPT);
            this.pv_power_estimate = this.mppt.getPower();
        } else {
            // If the MPPT estimate is not reliable (e.g. system is curtailed for a long time),
            // resort to an optimistic max etimate of maximum power to probe the limits
            this.setEstimationMode(PV_POWER_ESTIMATION_MODE.MAX);
            this.pv_power_estimate = this.pv_max_power_estimate; 
        }

        return this.pv_power_estimate;
    }

    updateEstimation() {
        var potential_pv_power = this.estimatePotentialPower();

        // The estimate guarantees that the potential is always higher than the actual
        // and therefore the unused potential is always >= 0
        this.pv_unused_potential_power = potential_pv_power - this.pv_power;
        this.pv_unused_potential_power_buffer.push(this.pv_unused_potential_power);

        // Correct the unused potential power by the feed-in above or below the limit.
        // If above, the PV system will regulate down the inverter and the deviation become available as 
        // additional potential.
        // If below, we are either not curtailed (negative excess power) or the PV system will regulate up,
        // subtracting from the currently measured potential excess.
        this.pv_excess_power = this.pv_unused_potential_power + this.pv_feedin_limit_deviation;
        this.pv_excess_power_buffer.push(this.pv_excess_power);
    }

    process() {
        this.inv10_power = getState(this.INV10_CUR_POWER_WATTS_OBJ).val;
        this.inv15_power = getState(this.INV15_CUR_POWER_WATTS_OBJ).val;
        this.pv_power = this.inv10_power + this.inv15_power;
        this.pv_power_buffer.push(this.pv_power);
        accumulateDailyEnergyStatBuffered(this.PV_DAY_PV_ENERGY_OBJ, this.pv_power_buffer);
        this.pv_power_max = max(this.pv_power, this.pv_power_max);

        this.feedin_power = getState(this.PV_GRID_FEEDIN_OBJ).val;
        this.pv_feedin_limit_deviation = this.feedin_power - this.PV_GRID_FEEDIN_MAX_WATTS;
        this.pv_feedin_power_buffer.push(this.feedin_power);
        accumulateDailyEnergyStatBuffered(this.PV_DAY_FEEDIN_ENERGY_OBJ, this.pv_feedin_power_buffer);

        this.self_consumption = this.pv_power - this.feedin_power;
        this.self_consumption_smoothed = smooth(this.self_consumption_smoothed, this.self_consumption, 0.3);
        this.self_consumption_buffer.push(this.self_consumption);
        accumulateDailyEnergyStatBuffered(this.PV_DAY_SELFCONSUMPTION_ENERGY_OBJ, this.self_consumption_buffer);

        this.grid_consumption = getState(this.PV_GRID_CONSUMPTION_OBJ).val;
        this.grid_consumption_buffer.push(this.grid_consumption);
        accumulateDailyEnergyStatBuffered(this.PV_DAY_GRIDCONSUMPTION_ENERGY_OBJ, this.grid_consumption_buffer);

        this.total_consumption = this.self_consumption + this.grid_consumption;
        this.total_consumption_buffer.push(this.total_consumption);
        accumulateDailyEnergyStatBuffered(this.PV_DAY_TOTALCONSUMPTION_ENERGY_OBJ, this.total_consumption_buffer);

        this.updateIrradianceEstimate();
        this.mppt.process(this.irradiance);
        this.updateEstimation();

        this.pv_power_estimate_buffer.push(this.pv_power_estimate);
        accumulateDailyEnergyStatBuffered(this.PV_DAY_PV_POTENTIAL_ENERGY_OBJ, this.pv_power_estimate_buffer);
        accumulateDailyEnergyStatBuffered(this.PV_DAY_EXCESS_ENERGY_OBJ, this.pv_unused_potential_power_buffer);
        accumulateDailyEnergyStatBuffered(this.PV_DAY_SHADINGLOSS_ENERGY_OBJ, this.pv_shading_loss_buffer);

        let available_excess_power = Math.max(this.pv_excess_power + this.controllable_load_power, 0);
        this.available_excess_power_buffer.push(available_excess_power);
        this.utilized_excess_power = Math.min(this.controllable_load_power, available_excess_power);

        let available_surplus_power = Math.max(this.feedin_power - this.grid_consumption + this.controllable_load_power + Math.max(this.pv_excess_power, 0), 0);
        this.available_surplus_power_buffer.push(available_surplus_power);
        let non_controlled_consumption = this.total_consumption - this.controllable_load_power;
        this.utilized_surplus_power = Math.max(this.self_consumption - non_controlled_consumption - this.utilized_excess_power, 0);
        this.utilized_grid_power = Math.min(this.grid_consumption, this.controllable_load_power);

        this.pv_forecast.updateMeasurement(this.pv_power_estimate);
        if(Math.floor(Date.now()/1000) % 5 == 0) { //TODO
            this.writeState();
        }
    }

    writeState() {
        setState(this.PV_FEEDIN_WATTS_OBJ, this.feedin_power, true);
        setState(this.PV_CUR_WATTS_OBJ, this.pv_power, true);
        setState(this.PV_FEEDIN_LIMIT_DEVIATION_WATTS_OBJ, this.pv_feedin_limit_deviation, true);
        setState(this.PV_SELF_CONSUMPTION_WATTS_OBJ, this.self_consumption, true);
        setState(this.PV_TOTAL_CONSUMPTION_WATTS_OBJ, this.total_consumption, true);

        setState(this.PV_SHADING_LOSS_WATTS_OBJ, this.pv_shading_loss, true);
        setState(this.PV_ESTIMATE_MAX_WATTS_OBJ, this.pv_max_power_estimate, true);
        setState(this.PV_ESTIMATE_WATTS_OBJ, this.pv_power_estimate, true);
        setState(this.PV_IRRADIANCE_ESTIMATE_OBJ, this.irradiance, true);

        setState(this.PV_IS_CURTAILED_OBJ, this.isCurtailed(), true);
        setState(this.PV_AVAILABLE_EXCESS_WATTS_OBJ, this.available_excess_power_buffer.last(), true);
        setState(this.PV_AVAILABLE_SURPLUS_WATTS_OBJ, this.available_surplus_power_buffer.last(), true);

        // For the sake of graphing, we floor the excess power at 0
        var pv_unused_excess_power = this.pv_excess_power > 0 ? this.pv_excess_power : 0;
        setState(this.PV_UNUSED_EXCESS_WATTS_OBJ, pv_unused_excess_power, true);

        this.writeDailyStats();
        this.mppt.writeState();
        
        // At the end of the update we reset the min/max values for the next period
        this.restartMeasurementPeriod();
    }

    writeDailyStats() {
        accumulateDailyEnergyStat(this.PV_DAY_UTIL_EXCESS_ENERGY_OBJ, this.utilized_excess_power);
        accumulateDailyEnergyStat(this.PV_DAY_UTIL_SURPLUS_ENERGY_OBJ, this.utilized_surplus_power);
        accumulateDailyEnergyStat(this.PV_DAY_UTIL_GRID_ENERGY_OBJ, this.utilized_grid_power);
        accumulateDailyEnergyStat(this.PV_DAY_CONTROLLABLE_LOAD_ENERGY_OBJ, this.controllable_load_power);
    }
}